"""empty message

Revision ID: 40c090cb04b6
Revises: 4644bccd8535
Create Date: 2015-09-11 18:56:29.087740

"""

# revision identifiers, used by Alembic.
revision = '40c090cb04b6'
down_revision = '4644bccd8535'

from alembic import op
from flask_sqlalchemy import _SessionSignalEvents
import sqlalchemy as sa
from sqlalchemy import event
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session as BaseSession, relationship, backref

Session = sessionmaker()

event.remove(BaseSession, 'before_commit', _SessionSignalEvents.session_signal_before_commit)
event.remove(BaseSession, 'after_commit', _SessionSignalEvents.session_signal_after_commit)
event.remove(BaseSession, 'after_rollback', _SessionSignalEvents.session_signal_after_rollback)

Base = declarative_base()

class Role(Base):
    __tablename__ = 'role'
    id = sa.Column(sa.Integer(), primary_key=True)
    name = sa.Column(sa.String(80), unique=True)
    description = sa.Column(sa.String(255))


class RU(Base):
    __tablename__ = 'roles_users'
    user_id = sa.Column(sa.Integer(), sa.ForeignKey('user.id'), primary_key=True)
    role_id = sa.Column(sa.Integer(), sa.ForeignKey('role.id'), primary_key=True)
    role = relationship('Role')


class User(Base):
    __tablename__ = 'user'
    id = sa.Column(sa.Integer, primary_key=True)
    first_name = sa.Column(sa.String(100))
    last_name = sa.Column(sa.String(100))
    login = sa.Column(sa.String(80), unique=True, nullable=False)
    email = sa.Column(sa.String(120))
    password = sa.Column(sa.String)
    is_superuser = sa.Column(sa.Boolean, default=False)
    roles = relationship('RU')



def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    # create the teams table and the players.team_id column
    # op.add_column('players', sa.Column('team_id', sa.ForeignKey('teams.id'), nullable=False)

    # create teams for each team name
    # teams = {name: User(name=name) for name in session.query(Player.team).distinct()}
    # session.add_all(teams.values())

    roles = ['user', 'vendor', 'driver']

    for r in roles:
        session.add(Role(name=r))

    main_r = session.query(Role).filter(Role.name=='user').one()

    # set player team based on team name
    for user in session.query(User):
        ru = RU()
        ru.user = user
        ru.role = main_r
        user.roles.append(ru)
        session.add(user)
        # player.team = teams[player.team_name]

    session.commit()
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###
