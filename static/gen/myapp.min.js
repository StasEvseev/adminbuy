(function (root, factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery', 'angular', 'qtip2'], factory);
    } else {
        // Browser globals
        root.amdWeb = factory(root.jQuery, root.angular);
    }
}(this, function (jQuery, angular) {
    'use strict';

    angular.module('qtip2', [])
        .directive('qtip', function () {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var qonfig = {
                        show: {
                            event: attrs.show || "mouseover",
                            delay: 1000,
                            effect: function() {
                                $(this).fadeTo(500, 1);
                            }
                        },

                        content: {
                            text: scope.dynamicContent || attrs.content || ''
                        },
                        position: {
                            my: attrs.my || 'bottom center',
                            at: attrs.at || 'top center',
                            target: element
                        },
                        hide: {
                            fixed : attrs.hideFixed || true,
                            delay : attrs.hideDelay || 0,
                            event : attrs.hideEvent || 'mouseleave',
                            effect: function() {
                                $(this).slideUp();
                            }
                        },
                        style: {
                            classes: attrs.classes ||Â 'qtip'
                        },
                        events: {
                            show: function () {
                                scope.$emit('tooltipshow'); // translate jquery event to angular event
                            },
                            hide: function (event, api) {
                                // if one decide to control the tooltip display through events (vqtipshow)
                                // it's easier to destroy it each time it hides, otherwise there could be
                                // events collision between built-in and custom events... (or maybe I just suck :D)
                                if (attrs.control !== undefined) {
                                    api.destroy();
                                }
                                scope.$emit('tooltiphide'); // translate jquery event to angular event
                            }
                        }
                    };

                    // is there a title ?
                    if (attrs.dynamicTitle) {
                        qonfig.content.title = attrs.dynamicTitle;
                    } else if (attrs.title) {
                        qonfig.content.title = attrs.title;
                    }

                    // if you're in control mode, the show event must be disabled
                    if (attrs.control !== undefined) {
                        qonfig.show = '';
                    }

                    jQuery(element).qtip(qonfig);



                    /* ---------- observers ------------------------------------------------------------------------- */

                    // if the qtip attribute receive the value 'false', the tooltip
                    // is immediately destroyed
                    attrs.$observe('qtip', function (value) {
                        if (value === 'false') {
                            jQuery(element).qtip('destroy', true);
                        } else {
                            jQuery(element).qtip(qonfig);
                        }
                    });

                    // by triggering the 'vqtipshow' event, you can pass in a
                    // configuration object with native qtip2 config properties.
                    scope.$on('vqtipshow', function (event, config) {

                        // qtip attribute value take precedence over this event.
                        if (attrs.qtip === 'false') {
                            return;
                        }

                        jQuery(element).qtip(jQuery.extend(true, qonfig, config));
                        jQuery(element).qtip('api').show();
                    });

                    attrs.$observe('dynamicTitle', function () {
                        jQuery(element).qtip('options', 'content.title', attrs.dynamicTitle);
                    });
                    attrs.$observe('dynamicContent', function () {
                        jQuery(element).qtip('options', 'content.text', attrs.dynamicContent);
                    });

                    /* -------- / observers ------------------------------------------------------------------------- */
                }
            };
        });
}));
/*! Socket.IO.min.js build:0.9.16, production. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */
var io="undefined"==typeof module?{}:module.exports;(function(){(function(a,b){var c=a;c.version="0.9.16",c.protocol=1,c.transports=[],c.j=[],c.sockets={},c.connect=function(a,d){var e=c.util.parseUri(a),f,g;b&&b.location&&(e.protocol=e.protocol||b.location.protocol.slice(0,-1),e.host=e.host||(b.document?b.document.domain:b.location.hostname),e.port=e.port||b.location.port),f=c.util.uniqueUri(e);var h={host:e.host,secure:"https"==e.protocol,port:e.port||("https"==e.protocol?443:80),query:e.query||""};c.util.merge(h,d);if(h["force new connection"]||!c.sockets[f])g=new c.Socket(h);return!h["force new connection"]&&g&&(c.sockets[f]=g),g=g||c.sockets[f],g.of(e.path.length>1?e.path:"")}})("object"==typeof module?module.exports:this.io={},this),function(a,b){var c=a.util={},d=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,e=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];c.parseUri=function(a){var b=d.exec(a||""),c={},f=14;while(f--)c[e[f]]=b[f]||"";return c},c.uniqueUri=function(a){var c=a.protocol,d=a.host,e=a.port;return"document"in b?(d=d||document.domain,e=e||(c=="https"&&document.location.protocol!=="https:"?443:document.location.port)):(d=d||"localhost",!e&&c=="https"&&(e=443)),(c||"http")+"://"+d+":"+(e||80)},c.query=function(a,b){var d=c.chunkQuery(a||""),e=[];c.merge(d,c.chunkQuery(b||""));for(var f in d)d.hasOwnProperty(f)&&e.push(f+"="+d[f]);return e.length?"?"+e.join("&"):""},c.chunkQuery=function(a){var b={},c=a.split("&"),d=0,e=c.length,f;for(;d<e;++d)f=c[d].split("="),f[0]&&(b[f[0]]=f[1]);return b};var f=!1;c.load=function(a){if("document"in b&&document.readyState==="complete"||f)return a();c.on(b,"load",a,!1)},c.on=function(a,b,c,d){a.attachEvent?a.attachEvent("on"+b,c):a.addEventListener&&a.addEventListener(b,c,d)},c.request=function(a){if(a&&"undefined"!=typeof XDomainRequest&&!c.ua.hasCORS)return new XDomainRequest;if("undefined"!=typeof XMLHttpRequest&&(!a||c.ua.hasCORS))return new XMLHttpRequest;if(!a)try{return new(window[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(b){}return null},"undefined"!=typeof window&&c.load(function(){f=!0}),c.defer=function(a){if(!c.ua.webkit||"undefined"!=typeof importScripts)return a();c.load(function(){setTimeout(a,100)})},c.merge=function(b,d,e,f){var g=f||[],h=typeof e=="undefined"?2:e,i;for(i in d)d.hasOwnProperty(i)&&c.indexOf(g,i)<0&&(typeof b[i]!="object"||!h?(b[i]=d[i],g.push(d[i])):c.merge(b[i],d[i],h-1,g));return b},c.mixin=function(a,b){c.merge(a.prototype,b.prototype)},c.inherit=function(a,b){function c(){}c.prototype=b.prototype,a.prototype=new c},c.isArray=Array.isArray||function(a){return Object.prototype.toString.call(a)==="[object Array]"},c.intersect=function(a,b){var d=[],e=a.length>b.length?a:b,f=a.length>b.length?b:a;for(var g=0,h=f.length;g<h;g++)~c.indexOf(e,f[g])&&d.push(f[g]);return d},c.indexOf=function(a,b,c){for(var d=a.length,c=c<0?c+d<0?0:c+d:c||0;c<d&&a[c]!==b;c++);return d<=c?-1:c},c.toArray=function(a){var b=[];for(var c=0,d=a.length;c<d;c++)b.push(a[c]);return b},c.ua={},c.ua.hasCORS="undefined"!=typeof XMLHttpRequest&&function(){try{var a=new XMLHttpRequest}catch(b){return!1}return a.withCredentials!=undefined}(),c.ua.webkit="undefined"!=typeof navigator&&/webkit/i.test(navigator.userAgent),c.ua.iDevice="undefined"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)}("undefined"!=typeof io?io:module.exports,this),function(a,b){function c(){}a.EventEmitter=c,c.prototype.on=function(a,c){return this.$events||(this.$events={}),this.$events[a]?b.util.isArray(this.$events[a])?this.$events[a].push(c):this.$events[a]=[this.$events[a],c]:this.$events[a]=c,this},c.prototype.addListener=c.prototype.on,c.prototype.once=function(a,b){function d(){c.removeListener(a,d),b.apply(this,arguments)}var c=this;return d.listener=b,this.on(a,d),this},c.prototype.removeListener=function(a,c){if(this.$events&&this.$events[a]){var d=this.$events[a];if(b.util.isArray(d)){var e=-1;for(var f=0,g=d.length;f<g;f++)if(d[f]===c||d[f].listener&&d[f].listener===c){e=f;break}if(e<0)return this;d.splice(e,1),d.length||delete this.$events[a]}else(d===c||d.listener&&d.listener===c)&&delete this.$events[a]}return this},c.prototype.removeAllListeners=function(a){return a===undefined?(this.$events={},this):(this.$events&&this.$events[a]&&(this.$events[a]=null),this)},c.prototype.listeners=function(a){return this.$events||(this.$events={}),this.$events[a]||(this.$events[a]=[]),b.util.isArray(this.$events[a])||(this.$events[a]=[this.$events[a]]),this.$events[a]},c.prototype.emit=function(a){if(!this.$events)return!1;var c=this.$events[a];if(!c)return!1;var d=Array.prototype.slice.call(arguments,1);if("function"==typeof c)c.apply(this,d);else{if(!b.util.isArray(c))return!1;var e=c.slice();for(var f=0,g=e.length;f<g;f++)e[f].apply(this,d)}return!0}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(exports,nativeJSON){function f(a){return a<10?"0"+a:a}function date(a,b){return isFinite(a.valueOf())?a.getUTCFullYear()+"-"+f(a.getUTCMonth()+1)+"-"+f(a.getUTCDate())+"T"+f(a.getUTCHours())+":"+f(a.getUTCMinutes())+":"+f(a.getUTCSeconds())+"Z":null}function quote(a){return escapable.lastIndex=0,escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i instanceof Date&&(i=date(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";return e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g,e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));return e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g,e}}"use strict";if(nativeJSON&&nativeJSON.parse)return exports.JSON={parse:nativeJSON.parse,stringify:nativeJSON.stringify};var JSON=exports.JSON={},cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")},JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse")}}("undefined"!=typeof io?io:module.exports,typeof JSON!="undefined"?JSON:undefined),function(a,b){var c=a.parser={},d=c.packets=["disconnect","connect","heartbeat","message","json","event","ack","error","noop"],e=c.reasons=["transport not supported","client not handshaken","unauthorized"],f=c.advice=["reconnect"],g=b.JSON,h=b.util.indexOf;c.encodePacket=function(a){var b=h(d,a.type),c=a.id||"",i=a.endpoint||"",j=a.ack,k=null;switch(a.type){case"error":var l=a.reason?h(e,a.reason):"",m=a.advice?h(f,a.advice):"";if(l!==""||m!=="")k=l+(m!==""?"+"+m:"");break;case"message":a.data!==""&&(k=a.data);break;case"event":var n={name:a.name};a.args&&a.args.length&&(n.args=a.args),k=g.stringify(n);break;case"json":k=g.stringify(a.data);break;case"connect":a.qs&&(k=a.qs);break;case"ack":k=a.ackId+(a.args&&a.args.length?"+"+g.stringify(a.args):"")}var o=[b,c+(j=="data"?"+":""),i];return k!==null&&k!==undefined&&o.push(k),o.join(":")},c.encodePayload=function(a){var b="";if(a.length==1)return a[0];for(var c=0,d=a.length;c<d;c++){var e=a[c];b+="\ufffd"+e.length+"\ufffd"+a[c]}return b};var i=/([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;c.decodePacket=function(a){var b=a.match(i);if(!b)return{};var c=b[2]||"",a=b[5]||"",h={type:d[b[1]],endpoint:b[4]||""};c&&(h.id=c,b[3]?h.ack="data":h.ack=!0);switch(h.type){case"error":var b=a.split("+");h.reason=e[b[0]]||"",h.advice=f[b[1]]||"";break;case"message":h.data=a||"";break;case"event":try{var j=g.parse(a);h.name=j.name,h.args=j.args}catch(k){}h.args=h.args||[];break;case"json":try{h.data=g.parse(a)}catch(k){}break;case"connect":h.qs=a||"";break;case"ack":var b=a.match(/^([0-9]+)(\+)?(.*)/);if(b){h.ackId=b[1],h.args=[];if(b[3])try{h.args=b[3]?g.parse(b[3]):[]}catch(k){}}break;case"disconnect":case"heartbeat":}return h},c.decodePayload=function(a){if(a.charAt(0)=="\ufffd"){var b=[];for(var d=1,e="";d<a.length;d++)a.charAt(d)=="\ufffd"?(b.push(c.decodePacket(a.substr(d+1).substr(0,e))),d+=Number(e)+1,e=""):e+=a.charAt(d);return b}return[c.decodePacket(a)]}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(a,b){function c(a,b){this.socket=a,this.sessid=b}a.Transport=c,b.util.mixin(c,b.EventEmitter),c.prototype.heartbeats=function(){return!0},c.prototype.onData=function(a){this.clearCloseTimeout(),(this.socket.connected||this.socket.connecting||this.socket.reconnecting)&&this.setCloseTimeout();if(a!==""){var c=b.parser.decodePayload(a);if(c&&c.length)for(var d=0,e=c.length;d<e;d++)this.onPacket(c[d])}return this},c.prototype.onPacket=function(a){return this.socket.setHeartbeatTimeout(),a.type=="heartbeat"?this.onHeartbeat():(a.type=="connect"&&a.endpoint==""&&this.onConnect(),a.type=="error"&&a.advice=="reconnect"&&(this.isOpen=!1),this.socket.onPacket(a),this)},c.prototype.setCloseTimeout=function(){if(!this.closeTimeout){var a=this;this.closeTimeout=setTimeout(function(){a.onDisconnect()},this.socket.closeTimeout)}},c.prototype.onDisconnect=function(){return this.isOpen&&this.close(),this.clearTimeouts(),this.socket.onDisconnect(),this},c.prototype.onConnect=function(){return this.socket.onConnect(),this},c.prototype.clearCloseTimeout=function(){this.closeTimeout&&(clearTimeout(this.closeTimeout),this.closeTimeout=null)},c.prototype.clearTimeouts=function(){this.clearCloseTimeout(),this.reopenTimeout&&clearTimeout(this.reopenTimeout)},c.prototype.packet=function(a){this.send(b.parser.encodePacket(a))},c.prototype.onHeartbeat=function(a){this.packet({type:"heartbeat"})},c.prototype.onOpen=function(){this.isOpen=!0,this.clearCloseTimeout(),this.socket.onOpen()},c.prototype.onClose=function(){var a=this;this.isOpen=!1,this.socket.onClose(),this.onDisconnect()},c.prototype.prepareUrl=function(){var a=this.socket.options;return this.scheme()+"://"+a.host+":"+a.port+"/"+a.resource+"/"+b.protocol+"/"+this.name+"/"+this.sessid},c.prototype.ready=function(a,b){b.call(this)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(a,b,c){function d(a){this.options={port:80,secure:!1,document:"document"in c?document:!1,resource:"socket.io",transports:b.transports,"connect timeout":1e4,"try multiple transports":!0,reconnect:!0,"reconnection delay":500,"reconnection limit":Infinity,"reopen delay":3e3,"max reconnection attempts":10,"sync disconnect on unload":!1,"auto connect":!0,"flash policy port":10843,manualFlush:!1},b.util.merge(this.options,a),this.connected=!1,this.open=!1,this.connecting=!1,this.reconnecting=!1,this.namespaces={},this.buffer=[],this.doBuffer=!1;if(this.options["sync disconnect on unload"]&&(!this.isXDomain()||b.util.ua.hasCORS)){var d=this;b.util.on(c,"beforeunload",function(){d.disconnectSync()},!1)}this.options["auto connect"]&&this.connect()}function e(){}a.Socket=d,b.util.mixin(d,b.EventEmitter),d.prototype.of=function(a){return this.namespaces[a]||(this.namespaces[a]=new b.SocketNamespace(this,a),a!==""&&this.namespaces[a].packet({type:"connect"})),this.namespaces[a]},d.prototype.publish=function(){this.emit.apply(this,arguments);var a;for(var b in this.namespaces)this.namespaces.hasOwnProperty(b)&&(a=this.of(b),a.$emit.apply(a,arguments))},d.prototype.handshake=function(a){function f(b){b instanceof Error?(c.connecting=!1,c.onError(b.message)):a.apply(null,b.split(":"))}var c=this,d=this.options,g=["http"+(d.secure?"s":"")+":/",d.host+":"+d.port,d.resource,b.protocol,b.util.query(this.options.query,"t="+ +(new Date))].join("/");if(this.isXDomain()&&!b.util.ua.hasCORS){var h=document.getElementsByTagName("script")[0],i=document.createElement("script");i.src=g+"&jsonp="+b.j.length,h.parentNode.insertBefore(i,h),b.j.push(function(a){f(a),i.parentNode.removeChild(i)})}else{var j=b.util.request();j.open("GET",g,!0),this.isXDomain()&&(j.withCredentials=!0),j.onreadystatechange=function(){j.readyState==4&&(j.onreadystatechange=e,j.status==200?f(j.responseText):j.status==403?c.onError(j.responseText):(c.connecting=!1,!c.reconnecting&&c.onError(j.responseText)))},j.send(null)}},d.prototype.getTransport=function(a){var c=a||this.transports,d;for(var e=0,f;f=c[e];e++)if(b.Transport[f]&&b.Transport[f].check(this)&&(!this.isXDomain()||b.Transport[f].xdomainCheck(this)))return new b.Transport[f](this,this.sessionid);return null},d.prototype.connect=function(a){if(this.connecting)return this;var c=this;return c.connecting=!0,this.handshake(function(d,e,f,g){function h(a){c.transport&&c.transport.clearTimeouts(),c.transport=c.getTransport(a);if(!c.transport)return c.publish("connect_failed");c.transport.ready(c,function(){c.connecting=!0,c.publish("connecting",c.transport.name),c.transport.open(),c.options["connect timeout"]&&(c.connectTimeoutTimer=setTimeout(function(){if(!c.connected){c.connecting=!1;if(c.options["try multiple transports"]){var a=c.transports;while(a.length>0&&a.splice(0,1)[0]!=c.transport.name);a.length?h(a):c.publish("connect_failed")}}},c.options["connect timeout"]))})}c.sessionid=d,c.closeTimeout=f*1e3,c.heartbeatTimeout=e*1e3,c.transports||(c.transports=c.origTransports=g?b.util.intersect(g.split(","),c.options.transports):c.options.transports),c.setHeartbeatTimeout(),h(c.transports),c.once("connect",function(){clearTimeout(c.connectTimeoutTimer),a&&typeof a=="function"&&a()})}),this},d.prototype.setHeartbeatTimeout=function(){clearTimeout(this.heartbeatTimeoutTimer);if(this.transport&&!this.transport.heartbeats())return;var a=this;this.heartbeatTimeoutTimer=setTimeout(function(){a.transport.onClose()},this.heartbeatTimeout)},d.prototype.packet=function(a){return this.connected&&!this.doBuffer?this.transport.packet(a):this.buffer.push(a),this},d.prototype.setBuffer=function(a){this.doBuffer=a,!a&&this.connected&&this.buffer.length&&(this.options.manualFlush||this.flushBuffer())},d.prototype.flushBuffer=function(){this.transport.payload(this.buffer),this.buffer=[]},d.prototype.disconnect=function(){if(this.connected||this.connecting)this.open&&this.of("").packet({type:"disconnect"}),this.onDisconnect("booted");return this},d.prototype.disconnectSync=function(){var a=b.util.request(),c=["http"+(this.options.secure?"s":"")+":/",this.options.host+":"+this.options.port,this.options.resource,b.protocol,"",this.sessionid].join("/")+"/?disconnect=1";a.open("GET",c,!1),a.send(null),this.onDisconnect("booted")},d.prototype.isXDomain=function(){var a=c.location.port||("https:"==c.location.protocol?443:80);return this.options.host!==c.location.hostname||this.options.port!=a},d.prototype.onConnect=function(){this.connected||(this.connected=!0,this.connecting=!1,this.doBuffer||this.setBuffer(!1),this.emit("connect"))},d.prototype.onOpen=function(){this.open=!0},d.prototype.onClose=function(){this.open=!1,clearTimeout(this.heartbeatTimeoutTimer)},d.prototype.onPacket=function(a){this.of(a.endpoint).onPacket(a)},d.prototype.onError=function(a){a&&a.advice&&a.advice==="reconnect"&&(this.connected||this.connecting)&&(this.disconnect(),this.options.reconnect&&this.reconnect()),this.publish("error",a&&a.reason?a.reason:a)},d.prototype.onDisconnect=function(a){var b=this.connected,c=this.connecting;this.connected=!1,this.connecting=!1,this.open=!1;if(b||c)this.transport.close(),this.transport.clearTimeouts(),b&&(this.publish("disconnect",a),"booted"!=a&&this.options.reconnect&&!this.reconnecting&&this.reconnect())},d.prototype.reconnect=function(){function e(){if(a.connected){for(var b in a.namespaces)a.namespaces.hasOwnProperty(b)&&""!==b&&a.namespaces[b].packet({type:"connect"});a.publish("reconnect",a.transport.name,a.reconnectionAttempts)}clearTimeout(a.reconnectionTimer),a.removeListener("connect_failed",f),a.removeListener("connect",f),a.reconnecting=!1,delete a.reconnectionAttempts,delete a.reconnectionDelay,delete a.reconnectionTimer,delete a.redoTransports,a.options["try multiple transports"]=c}function f(){if(!a.reconnecting)return;if(a.connected)return e();if(a.connecting&&a.reconnecting)return a.reconnectionTimer=setTimeout(f,1e3);a.reconnectionAttempts++>=b?a.redoTransports?(a.publish("reconnect_failed"),e()):(a.on("connect_failed",f),a.options["try multiple transports"]=!0,a.transports=a.origTransports,a.transport=a.getTransport(),a.redoTransports=!0,a.connect()):(a.reconnectionDelay<d&&(a.reconnectionDelay*=2),a.connect(),a.publish("reconnecting",a.reconnectionDelay,a.reconnectionAttempts),a.reconnectionTimer=setTimeout(f,a.reconnectionDelay))}this.reconnecting=!0,this.reconnectionAttempts=0,this.reconnectionDelay=this.options["reconnection delay"];var a=this,b=this.options["max reconnection attempts"],c=this.options["try multiple transports"],d=this.options["reconnection limit"];this.options["try multiple transports"]=!1,this.reconnectionTimer=setTimeout(f,this.reconnectionDelay),this.on("connect",f)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(a,b){function c(a,b){this.socket=a,this.name=b||"",this.flags={},this.json=new d(this,"json"),this.ackPackets=0,this.acks={}}function d(a,b){this.namespace=a,this.name=b}a.SocketNamespace=c,b.util.mixin(c,b.EventEmitter),c.prototype.$emit=b.EventEmitter.prototype.emit,c.prototype.of=function(){return this.socket.of.apply(this.socket,arguments)},c.prototype.packet=function(a){return a.endpoint=this.name,this.socket.packet(a),this.flags={},this},c.prototype.send=function(a,b){var c={type:this.flags.json?"json":"message",data:a};return"function"==typeof b&&(c.id=++this.ackPackets,c.ack=!0,this.acks[c.id]=b),this.packet(c)},c.prototype.emit=function(a){var b=Array.prototype.slice.call(arguments,1),c=b[b.length-1],d={type:"event",name:a};return"function"==typeof c&&(d.id=++this.ackPackets,d.ack="data",this.acks[d.id]=c,b=b.slice(0,b.length-1)),d.args=b,this.packet(d)},c.prototype.disconnect=function(){return this.name===""?this.socket.disconnect():(this.packet({type:"disconnect"}),this.$emit("disconnect")),this},c.prototype.onPacket=function(a){function d(){c.packet({type:"ack",args:b.util.toArray(arguments),ackId:a.id})}var c=this;switch(a.type){case"connect":this.$emit("connect");break;case"disconnect":this.name===""?this.socket.onDisconnect(a.reason||"booted"):this.$emit("disconnect",a.reason);break;case"message":case"json":var e=["message",a.data];a.ack=="data"?e.push(d):a.ack&&this.packet({type:"ack",ackId:a.id}),this.$emit.apply(this,e);break;case"event":var e=[a.name].concat(a.args);a.ack=="data"&&e.push(d),this.$emit.apply(this,e);break;case"ack":this.acks[a.ackId]&&(this.acks[a.ackId].apply(this,a.args),delete this.acks[a.ackId]);break;case"error":a.advice?this.socket.onError(a):a.reason=="unauthorized"?this.$emit("connect_failed",a.reason):this.$emit("error",a.reason)}},d.prototype.send=function(){this.namespace.flags[this.name]=!0,this.namespace.send.apply(this.namespace,arguments)},d.prototype.emit=function(){this.namespace.flags[this.name]=!0,this.namespace.emit.apply(this.namespace,arguments)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(a,b,c){function d(a){b.Transport.apply(this,arguments)}a.websocket=d,b.util.inherit(d,b.Transport),d.prototype.name="websocket",d.prototype.open=function(){var a=b.util.query(this.socket.options.query),d=this,e;return e||(e=c.MozWebSocket||c.WebSocket),this.websocket=new e(this.prepareUrl()+a),this.websocket.onopen=function(){d.onOpen(),d.socket.setBuffer(!1)},this.websocket.onmessage=function(a){d.onData(a.data)},this.websocket.onclose=function(){d.onClose(),d.socket.setBuffer(!0)},this.websocket.onerror=function(a){d.onError(a)},this},b.util.ua.iDevice?d.prototype.send=function(a){var b=this;return setTimeout(function(){b.websocket.send(a)},0),this}:d.prototype.send=function(a){return this.websocket.send(a),this},d.prototype.payload=function(a){for(var b=0,c=a.length;b<c;b++)this.packet(a[b]);return this},d.prototype.close=function(){return this.websocket.close(),this},d.prototype.onError=function(a){this.socket.onError(a)},d.prototype.scheme=function(){return this.socket.options.secure?"wss":"ws"},d.check=function(){return"WebSocket"in c&&!("__addTask"in WebSocket)||"MozWebSocket"in c},d.xdomainCheck=function(){return!0},b.transports.push("websocket")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(a,b){function c(){b.Transport.websocket.apply(this,arguments)}a.flashsocket=c,b.util.inherit(c,b.Transport.websocket),c.prototype.name="flashsocket",c.prototype.open=function(){var a=this,c=arguments;return WebSocket.__addTask(function(){b.Transport.websocket.prototype.open.apply(a,c)}),this},c.prototype.send=function(){var a=this,c=arguments;return WebSocket.__addTask(function(){b.Transport.websocket.prototype.send.apply(a,c)}),this},c.prototype.close=function(){return WebSocket.__tasks.length=0,b.Transport.websocket.prototype.close.call(this),this},c.prototype.ready=function(a,d){function e(){var b=a.options,e=b["flash policy port"],g=["http"+(b.secure?"s":"")+":/",b.host+":"+b.port,b.resource,"static/flashsocket","WebSocketMain"+(a.isXDomain()?"Insecure":"")+".swf"];c.loaded||(typeof WEB_SOCKET_SWF_LOCATION=="undefined"&&(WEB_SOCKET_SWF_LOCATION=g.join("/")),e!==843&&WebSocket.loadFlashPolicyFile("xmlsocket://"+b.host+":"+e),WebSocket.__initialize(),c.loaded=!0),d.call(f)}var f=this;if(document.body)return e();b.util.load(e)},c.check=function(){return typeof WebSocket!="undefined"&&"__initialize"in WebSocket&&!!swfobject?swfobject.getFlashPlayerVersion().major>=10:!1},c.xdomainCheck=function(){return!0},typeof window!="undefined"&&(WEB_SOCKET_DISABLE_AUTO_INITIALIZATION=!0),b.transports.push("flashsocket")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports);if("undefined"!=typeof window)var swfobject=function(){function A(){if(t)return;try{var a=i.getElementsByTagName("body")[0].appendChild(Q("span"));a.parentNode.removeChild(a)}catch(b){return}t=!0;var c=l.length;for(var d=0;d<c;d++)l[d]()}function B(a){t?a():l[l.length]=a}function C(b){if(typeof h.addEventListener!=a)h.addEventListener("load",b,!1);else if(typeof i.addEventListener!=a)i.addEventListener("load",b,!1);else if(typeof h.attachEvent!=a)R(h,"onload",b);else if(typeof h.onload=="function"){var c=h.onload;h.onload=function(){c(),b()}}else h.onload=b}function D(){k?E():F()}function E(){var c=i.getElementsByTagName("body")[0],d=Q(b);d.setAttribute("type",e);var f=c.appendChild(d);if(f){var g=0;(function(){if(typeof f.GetVariable!=a){var b=f.GetVariable("$version");b&&(b=b.split(" ")[1].split(","),y.pv=[parseInt(b[0],10),parseInt(b[1],10),parseInt(b[2],10)])}else if(g<10){g++,setTimeout(arguments.callee,10);return}c.removeChild(d),f=null,F()})()}else F()}function F(){var b=m.length;if(b>0)for(var c=0;c<b;c++){var d=m[c].id,e=m[c].callbackFn,f={success:!1,id:d};if(y.pv[0]>0){var g=P(d);if(g)if(S(m[c].swfVersion)&&!(y.wk&&y.wk<312))U(d,!0),e&&(f.success=!0,f.ref=G(d),e(f));else if(m[c].expressInstall&&H()){var h={};h.data=m[c].expressInstall,h.width=g.getAttribute("width")||"0",h.height=g.getAttribute("height")||"0",g.getAttribute("class")&&(h.styleclass=g.getAttribute("class")),g.getAttribute("align")&&(h.align=g.getAttribute("align"));var i={},j=g.getElementsByTagName("param"),k=j.length;for(var l=0;l<k;l++)j[l].getAttribute("name").toLowerCase()!="movie"&&(i[j[l].getAttribute("name")]=j[l].getAttribute("value"));I(h,i,d,e)}else J(g),e&&e(f)}else{U(d,!0);if(e){var n=G(d);n&&typeof n.SetVariable!=a&&(f.success=!0,f.ref=n),e(f)}}}}function G(c){var d=null,e=P(c);if(e&&e.nodeName=="OBJECT")if(typeof e.SetVariable!=a)d=e;else{var f=e.getElementsByTagName(b)[0];f&&(d=f)}return d}function H(){return!u&&S("6.0.65")&&(y.win||y.mac)&&!(y.wk&&y.wk<312)}function I(b,c,d,e){u=!0,r=e||null,s={success:!1,id:d};var g=P(d);if(g){g.nodeName=="OBJECT"?(p=K(g),q=null):(p=g,q=d),b.id=f;if(typeof b.width==a||!/%$/.test(b.width)&&parseInt(b.width,10)<310)b.width="310";if(typeof b.height==a||!/%$/.test(b.height)&&parseInt(b.height,10)<137)b.height="137";i.title=i.title.slice(0,47)+" - Flash Player Installation";var j=y.ie&&y.win?["Active"].concat("").join("X"):"PlugIn",k="MMredirectURL="+h.location.toString().replace(/&/g,"%26")+"&MMplayerType="+j+"&MMdoctitle="+i.title;typeof c.flashvars!=a?c.flashvars+="&"+k:c.flashvars=k;if(y.ie&&y.win&&g.readyState!=4){var l=Q("div");d+="SWFObjectNew",l.setAttribute("id",d),g.parentNode.insertBefore(l,g),g.style.display="none",function(){g.readyState==4?g.parentNode.removeChild(g):setTimeout(arguments.callee,10)}()}L(b,c,d)}}function J(a){if(y.ie&&y.win&&a.readyState!=4){var b=Q("div");a.parentNode.insertBefore(b,a),b.parentNode.replaceChild(K(a),b),a.style.display="none",function(){a.readyState==4?a.parentNode.removeChild(a):setTimeout(arguments.callee,10)}()}else a.parentNode.replaceChild(K(a),a)}function K(a){var c=Q("div");if(y.win&&y.ie)c.innerHTML=a.innerHTML;else{var d=a.getElementsByTagName(b)[0];if(d){var e=d.childNodes;if(e){var f=e.length;for(var g=0;g<f;g++)(e[g].nodeType!=1||e[g].nodeName!="PARAM")&&e[g].nodeType!=8&&c.appendChild(e[g].cloneNode(!0))}}}return c}function L(c,d,f){var g,h=P(f);if(y.wk&&y.wk<312)return g;if(h){typeof c.id==a&&(c.id=f);if(y.ie&&y.win){var i="";for(var j in c)c[j]!=Object.prototype[j]&&(j.toLowerCase()=="data"?d.movie=c[j]:j.toLowerCase()=="styleclass"?i+=' class="'+c[j]+'"':j.toLowerCase()!="classid"&&(i+=" "+j+'="'+c[j]+'"'));var k="";for(var l in d)d[l]!=Object.prototype[l]&&(k+='<param name="'+l+'" value="'+d[l]+'" />');h.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+i+">"+k+"</object>",n[n.length]=c.id,g=P(c.id)}else{var m=Q(b);m.setAttribute("type",e);for(var o in c)c[o]!=Object.prototype[o]&&(o.toLowerCase()=="styleclass"?m.setAttribute("class",c[o]):o.toLowerCase()!="classid"&&m.setAttribute(o,c[o]));for(var p in d)d[p]!=Object.prototype[p]&&p.toLowerCase()!="movie"&&M(m,p,d[p]);h.parentNode.replaceChild(m,h),g=m}}return g}function M(a,b,c){var d=Q("param");d.setAttribute("name",b),d.setAttribute("value",c),a.appendChild(d)}function N(a){var b=P(a);b&&b.nodeName=="OBJECT"&&(y.ie&&y.win?(b.style.display="none",function(){b.readyState==4?O(a):setTimeout(arguments.callee,10)}()):b.parentNode.removeChild(b))}function O(a){var b=P(a);if(b){for(var c in b)typeof b[c]=="function"&&(b[c]=null);b.parentNode.removeChild(b)}}function P(a){var b=null;try{b=i.getElementById(a)}catch(c){}return b}function Q(a){return i.createElement(a)}function R(a,b,c){a.attachEvent(b,c),o[o.length]=[a,b,c]}function S(a){var b=y.pv,c=a.split(".");return c[0]=parseInt(c[0],10),c[1]=parseInt(c[1],10)||0,c[2]=parseInt(c[2],10)||0,b[0]>c[0]||b[0]==c[0]&&b[1]>c[1]||b[0]==c[0]&&b[1]==c[1]&&b[2]>=c[2]?!0:!1}function T(c,d,e,f){if(y.ie&&y.mac)return;var g=i.getElementsByTagName("head")[0];if(!g)return;var h=e&&typeof e=="string"?e:"screen";f&&(v=null,w=null);if(!v||w!=h){var j=Q("style");j.setAttribute("type","text/css"),j.setAttribute("media",h),v=g.appendChild(j),y.ie&&y.win&&typeof i.styleSheets!=a&&i.styleSheets.length>0&&(v=i.styleSheets[i.styleSheets.length-1]),w=h}y.ie&&y.win?v&&typeof v.addRule==b&&v.addRule(c,d):v&&typeof i.createTextNode!=a&&v.appendChild(i.createTextNode(c+" {"+d+"}"))}function U(a,b){if(!x)return;var c=b?"visible":"hidden";t&&P(a)?P(a).style.visibility=c:T("#"+a,"visibility:"+c)}function V(b){var c=/[\\\"<>\.;]/,d=c.exec(b)!=null;return d&&typeof encodeURIComponent!=a?encodeURIComponent(b):b}var a="undefined",b="object",c="Shockwave Flash",d="ShockwaveFlash.ShockwaveFlash",e="application/x-shockwave-flash",f="SWFObjectExprInst",g="onreadystatechange",h=window,i=document,j=navigator,k=!1,l=[D],m=[],n=[],o=[],p,q,r,s,t=!1,u=!1,v,w,x=!0,y=function(){var f=typeof i.getElementById!=a&&typeof i.getElementsByTagName!=a&&typeof i.createElement!=a,g=j.userAgent.toLowerCase(),l=j.platform.toLowerCase(),m=l?/win/.test(l):/win/.test(g),n=l?/mac/.test(l):/mac/.test(g),o=/webkit/.test(g)?parseFloat(g.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):!1,p=!1,q=[0,0,0],r=null;if(typeof j.plugins!=a&&typeof j.plugins[c]==b)r=j.plugins[c].description,r&&(typeof j.mimeTypes==a||!j.mimeTypes[e]||!!j.mimeTypes[e].enabledPlugin)&&(k=!0,p=!1,r=r.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),q[0]=parseInt(r.replace(/^(.*)\..*$/,"$1"),10),q[1]=parseInt(r.replace(/^.*\.(.*)\s.*$/,"$1"),10),q[2]=/[a-zA-Z]/.test(r)?parseInt(r.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0);else if(typeof h[["Active"].concat("Object").join("X")]!=a)try{var s=new(window[["Active"].concat("Object").join("X")])(d);s&&(r=s.GetVariable("$version"),r&&(p=!0,r=r.split(" ")[1].split(","),q=[parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10)]))}catch(t){}return{w3:f,pv:q,wk:o,ie:p,win:m,mac:n}}(),z=function(){if(!y.w3)return;(typeof i.readyState!=a&&i.readyState=="complete"||typeof i.readyState==a&&(i.getElementsByTagName("body")[0]||i.body))&&A(),t||(typeof i.addEventListener!=a&&i.addEventListener("DOMContentLoaded",A,!1),y.ie&&y.win&&(i.attachEvent(g,function(){i.readyState=="complete"&&(i.detachEvent(g,arguments.callee),A())}),h==top&&function(){if(t)return;try{i.documentElement.doScroll("left")}catch(a){setTimeout(arguments.callee,0);return}A()}()),y.wk&&function(){if(t)return;if(!/loaded|complete/.test(i.readyState)){setTimeout(arguments.callee,0);return}A()}(),C(A))}(),W=function(){y.ie&&y.win&&window.attachEvent("onunload",function(){var a=o.length;for(var b=0;b<a;b++)o[b][0].detachEvent(o[b][1],o[b][2]);var c=n.length;for(var d=0;d<c;d++)N(n[d]);for(var e in y)y[e]=null;y=null;for(var f in swfobject)swfobject[f]=null;swfobject=null})}();return{registerObject:function(a,b,c,d){if(y.w3&&a&&b){var e={};e.id=a,e.swfVersion=b,e.expressInstall=c,e.callbackFn=d,m[m.length]=e,U(a,!1)}else d&&d({success:!1,id:a})},getObjectById:function(a){if(y.w3)return G(a)},embedSWF:function(c,d,e,f,g,h,i,j,k,l){var m={success:!1,id:d};y.w3&&!(y.wk&&y.wk<312)&&c&&d&&e&&f&&g?(U(d,!1),B(function(){e+="",f+="";var n={};if(k&&typeof k===b)for(var o in k)n[o]=k[o];n.data=c,n.width=e,n.height=f;var p={};if(j&&typeof j===b)for(var q in j)p[q]=j[q];if(i&&typeof i===b)for(var r in i)typeof p.flashvars!=a?p.flashvars+="&"+r+"="+i[r]:p.flashvars=r+"="+i[r];if(S(g)){var s=L(n,p,d);n.id==d&&U(d,!0),m.success=!0,m.ref=s}else{if(h&&H()){n.data=h,I(n,p,d,l);return}U(d,!0)}l&&l(m)})):l&&l(m)},switchOffAutoHideShow:function(){x=!1},ua:y,getFlashPlayerVersion:function(){return{major:y.pv[0],minor:y.pv[1],release:y.pv[2]}},hasFlashPlayerVersion:S,createSWF:function(a,b,c){return y.w3?L(a,b,c):undefined},showExpressInstall:function(a,b,c,d){y.w3&&H()&&I(a,b,c,d)},removeSWF:function(a){y.w3&&N(a)},createCSS:function(a,b,c,d){y.w3&&T(a,b,c,d)},addDomLoadEvent:B,addLoadEvent:C,getQueryParamValue:function(a){var b=i.location.search||i.location.hash;if(b){/\?/.test(b)&&(b=b.split("?")[1]);if(a==null)return V(b);var c=b.split("&");for(var d=0;d<c.length;d++)if(c[d].substring(0,c[d].indexOf("="))==a)return V(c[d].substring(c[d].indexOf("=")+1))}return""},expressInstallCallback:function(){if(u){var a=P(f);a&&p&&(a.parentNode.replaceChild(p,a),q&&(U(q,!0),y.ie&&y.win&&(p.style.display="block")),r&&r(s)),u=!1}}}}();(function(){if("undefined"==typeof window||window.WebSocket)return;var a=window.console;if(!a||!a.log||!a.error)a={log:function(){},error:function(){}};if(!swfobject.hasFlashPlayerVersion("10.0.0")){a.error("Flash Player >= 10.0.0 is required.");return}location.protocol=="file:"&&a.error("WARNING: web-socket-js doesn't work in file:///... URL unless you set Flash Security Settings properly. Open the page via Web server i.e. http://..."),WebSocket=function(a,b,c,d,e){var f=this;f.__id=WebSocket.__nextId++,WebSocket.__instances[f.__id]=f,f.readyState=WebSocket.CONNECTING,f.bufferedAmount=0,f.__events={},b?typeof b=="string"&&(b=[b]):b=[],setTimeout(function(){WebSocket.__addTask(function(){WebSocket.__flash.create(f.__id,a,b,c||null,d||0,e||null)})},0)},WebSocket.prototype.send=function(a){if(this.readyState==WebSocket.CONNECTING)throw"INVALID_STATE_ERR: Web Socket connection has not been established";var b=WebSocket.__flash.send(this.__id,encodeURIComponent(a));return b<0?!0:(this.bufferedAmount+=b,!1)},WebSocket.prototype.close=function(){if(this.readyState==WebSocket.CLOSED||this.readyState==WebSocket.CLOSING)return;this.readyState=WebSocket.CLOSING,WebSocket.__flash.close(this.__id)},WebSocket.prototype.addEventListener=function(a,b,c){a in this.__events||(this.__events[a]=[]),this.__events[a].push(b)},WebSocket.prototype.removeEventListener=function(a,b,c){if(!(a in this.__events))return;var d=this.__events[a];for(var e=d.length-1;e>=0;--e)if(d[e]===b){d.splice(e,1);break}},WebSocket.prototype.dispatchEvent=function(a){var b=this.__events[a.type]||[];for(var c=0;c<b.length;++c)b[c](a);var d=this["on"+a.type];d&&d(a)},WebSocket.prototype.__handleEvent=function(a){"readyState"in a&&(this.readyState=a.readyState),"protocol"in a&&(this.protocol=a.protocol);var b;if(a.type=="open"||a.type=="error")b=this.__createSimpleEvent(a.type);else if(a.type=="close")b=this.__createSimpleEvent("close");else{if(a.type!="message")throw"unknown event type: "+a.type;var c=decodeURIComponent(a.message);b=this.__createMessageEvent("message",c)}this.dispatchEvent(b)},WebSocket.prototype.__createSimpleEvent=function(a){if(document.createEvent&&window.Event){var b=document.createEvent("Event");return b.initEvent(a,!1,!1),b}return{type:a,bubbles:!1,cancelable:!1}},WebSocket.prototype.__createMessageEvent=function(a,b){if(document.createEvent&&window.MessageEvent&&!window.opera){var c=document.createEvent("MessageEvent");return c.initMessageEvent("message",!1,!1,b,null,null,window,null),c}return{type:a,data:b,bubbles:!1,cancelable:!1}},WebSocket.CONNECTING=0,WebSocket.OPEN=1,WebSocket.CLOSING=2,WebSocket.CLOSED=3,WebSocket.__flash=null,WebSocket.__instances={},WebSocket.__tasks=[],WebSocket.__nextId=0,WebSocket.loadFlashPolicyFile=function(a){WebSocket.__addTask(function(){WebSocket.__flash.loadManualPolicyFile(a)})},WebSocket.__initialize=function(){if(WebSocket.__flash)return;WebSocket.__swfLocation&&(window.WEB_SOCKET_SWF_LOCATION=WebSocket.__swfLocation);if(!window.WEB_SOCKET_SWF_LOCATION){a.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");return}var b=document.createElement("div");b.id="webSocketContainer",b.style.position="absolute",WebSocket.__isFlashLite()?(b.style.left="0px",b.style.top="0px"):(b.style.left="-100px",b.style.top="-100px");var c=document.createElement("div");c.id="webSocketFlash",b.appendChild(c),document.body.appendChild(b),swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION,"webSocketFlash","1","1","10.0.0",null,null,{hasPriority:!0,swliveconnect:!0,allowScriptAccess:"always"},null,function(b){b.success||a.error("[WebSocket] swfobject.embedSWF failed")})},WebSocket.__onFlashInitialized=function(){setTimeout(function(){WebSocket.__flash=document.getElementById("webSocketFlash"),WebSocket.__flash.setCallerUrl(location.href),WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);for(var a=0;a<WebSocket.__tasks.length;++a)WebSocket.__tasks[a]();WebSocket.__tasks=[]},0)},WebSocket.__onFlashEvent=function(){return setTimeout(function(){try{var b=WebSocket.__flash.receiveEvents();for(var c=0;c<b.length;++c)WebSocket.__instances[b[c].webSocketId].__handleEvent(b[c])}catch(d){a.error(d)}},0),!0},WebSocket.__log=function(b){a.log(decodeURIComponent(b))},WebSocket.__error=function(b){a.error(decodeURIComponent(b))},WebSocket.__addTask=function(a){WebSocket.__flash?a():WebSocket.__tasks.push(a)},WebSocket.__isFlashLite=function(){if(!window.navigator||!window.navigator.mimeTypes)return!1;var a=window.navigator.mimeTypes["application/x-shockwave-flash"];return!a||!a.enabledPlugin||!a.enabledPlugin.filename?!1:a.enabledPlugin.filename.match(/flashlite/i)?!0:!1},window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION||(window.addEventListener?window.addEventListener("load",function(){WebSocket.__initialize()},!1):window.attachEvent("onload",function(){WebSocket.__initialize()}))})(),function(a,b,c){function d(a){if(!a)return;b.Transport.apply(this,arguments),this.sendBuffer=[]}function e(){}a.XHR=d,b.util.inherit(d,b.Transport),d.prototype.open=function(){return this.socket.setBuffer(!1),this.onOpen(),this.get(),this.setCloseTimeout(),this},d.prototype.payload=function(a){var c=[];for(var d=0,e=a.length;d<e;d++)c.push(b.parser.encodePacket(a[d]));this.send(b.parser.encodePayload(c))},d.prototype.send=function(a){return this.post(a),this},d.prototype.post=function(a){function d(){this.readyState==4&&(this.onreadystatechange=e,b.posting=!1,this.status==200?b.socket.setBuffer(!1):b.onClose())}function f(){this.onload=e,b.socket.setBuffer(!1)}var b=this;this.socket.setBuffer(!0),this.sendXHR=this.request("POST"),c.XDomainRequest&&this.sendXHR instanceof XDomainRequest?this.sendXHR.onload=this.sendXHR.onerror=f:this.sendXHR.onreadystatechange=d,this.sendXHR.send(a)},d.prototype.close=function(){return this.onClose(),this},d.prototype.request=function(a){var c=b.util.request(this.socket.isXDomain()),d=b.util.query(this.socket.options.query,"t="+ +(new Date));c.open(a||"GET",this.prepareUrl()+d,!0);if(a=="POST")try{c.setRequestHeader?c.setRequestHeader("Content-type","text/plain;charset=UTF-8"):c.contentType="text/plain"}catch(e){}return c},d.prototype.scheme=function(){return this.socket.options.secure?"https":"http"},d.check=function(a,d){try{var e=b.util.request(d),f=c.XDomainRequest&&e instanceof XDomainRequest,g=a&&a.options&&a.options.secure?"https:":"http:",h=c.location&&g!=c.location.protocol;if(e&&(!f||!h))return!0}catch(i){}return!1},d.xdomainCheck=function(a){return d.check(a,!0)}}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(a,b){function c(a){b.Transport.XHR.apply(this,arguments)}a.htmlfile=c,b.util.inherit(c,b.Transport.XHR),c.prototype.name="htmlfile",c.prototype.get=function(){this.doc=new(window[["Active"].concat("Object").join("X")])("htmlfile"),this.doc.open(),this.doc.write("<html></html>"),this.doc.close(),this.doc.parentWindow.s=this;var a=this.doc.createElement("div");a.className="socketio",this.doc.body.appendChild(a),this.iframe=this.doc.createElement("iframe"),a.appendChild(this.iframe);var c=this,d=b.util.query(this.socket.options.query,"t="+ +(new Date));this.iframe.src=this.prepareUrl()+d,b.util.on(window,"unload",function(){c.destroy()})},c.prototype._=function(a,b){a=a.replace(/\\\//g,"/"),this.onData(a);try{var c=b.getElementsByTagName("script")[0];c.parentNode.removeChild(c)}catch(d){}},c.prototype.destroy=function(){if(this.iframe){try{this.iframe.src="about:blank"}catch(a){}this.doc=null,this.iframe.parentNode.removeChild(this.iframe),this.iframe=null,CollectGarbage()}},c.prototype.close=function(){return this.destroy(),b.Transport.XHR.prototype.close.call(this)},c.check=function(a){if(typeof window!="undefined"&&["Active"].concat("Object").join("X")in window)try{var c=new(window[["Active"].concat("Object").join("X")])("htmlfile");return c&&b.Transport.XHR.check(a)}catch(d){}return!1},c.xdomainCheck=function(){return!1},b.transports.push("htmlfile")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(a,b,c){function d(){b.Transport.XHR.apply(this,arguments)}function e(){}a["xhr-polling"]=d,b.util.inherit(d,b.Transport.XHR),b.util.merge(d,b.Transport.XHR),d.prototype.name="xhr-polling",d.prototype.heartbeats=function(){return!1},d.prototype.open=function(){var a=this;return b.Transport.XHR.prototype.open.call(a),!1},d.prototype.get=function(){function b(){this.readyState==4&&(this.onreadystatechange=e,this.status==200?(a.onData(this.responseText),a.get()):a.onClose())}function d(){this.onload=e,this.onerror=e,a.retryCounter=1,a.onData(this.responseText),a.get()}function f(){a.retryCounter++,!a.retryCounter||a.retryCounter>3?a.onClose():a.get()}if(!this.isOpen)return;var a=this;this.xhr=this.request(),c.XDomainRequest&&this.xhr instanceof XDomainRequest?(this.xhr.onload=d,this.xhr.onerror=f):this.xhr.onreadystatechange=b,this.xhr.send(null)},d.prototype.onClose=function(){b.Transport.XHR.prototype.onClose.call(this);if(this.xhr){this.xhr.onreadystatechange=this.xhr.onload=this.xhr.onerror=e;try{this.xhr.abort()}catch(a){}this.xhr=null}},d.prototype.ready=function(a,c){var d=this;b.util.defer(function(){c.call(d)})},b.transports.push("xhr-polling")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(a,b,c){function e(a){b.Transport["xhr-polling"].apply(this,arguments),this.index=b.j.length;var c=this;b.j.push(function(a){c._(a)})}var d=c.document&&"MozAppearance"in c.document.documentElement.style;a["jsonp-polling"]=e,b.util.inherit(e,b.Transport["xhr-polling"]),e.prototype.name="jsonp-polling",e.prototype.post=function(a){function i(){j(),c.socket.setBuffer(!1)}function j(){c.iframe&&c.form.removeChild(c.iframe);try{h=document.createElement('<iframe name="'+c.iframeId+'">')}catch(a){h=document.createElement("iframe"),h.name=c.iframeId}h.id=c.iframeId,c.form.appendChild(h),c.iframe=h}var c=this,d=b.util.query(this.socket.options.query,"t="+ +(new Date)+"&i="+this.index);if(!this.form){var e=document.createElement("form"),f=document.createElement("textarea"),g=this.iframeId="socketio_iframe_"+this.index,h;e.className="socketio",e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.style.display="none",e.target=g,e.method="POST",e.setAttribute("accept-charset","utf-8"),f.name="d",e.appendChild(f),document.body.appendChild(e),this.form=e,this.area=f}this.form.action=this.prepareUrl()+d,j(),this.area.value=b.JSON.stringify(a);try{this.form.submit()}catch(k){}this.iframe.attachEvent?h.onreadystatechange=function(){c.iframe.readyState=="complete"&&i()}:this.iframe.onload=i,this.socket.setBuffer(!0)},e.prototype.get=function(){var a=this,c=document.createElement("script"),e=b.util.query(this.socket.options.query,"t="+ +(new Date)+"&i="+this.index);this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),c.async=!0,c.src=this.prepareUrl()+e,c.onerror=function(){a.onClose()};var f=document.getElementsByTagName("script")[0];f.parentNode.insertBefore(c,f),this.script=c,d&&setTimeout(function(){var a=document.createElement("iframe");document.body.appendChild(a),document.body.removeChild(a)},100)},e.prototype._=function(a){return this.onData(a),this.isOpen&&this.get(),this},e.prototype.ready=function(a,c){var e=this;if(!d)return c.call(this);b.util.load(function(){c.call(e)})},e.check=function(){return"document"in c},e.xdomainCheck=function(){return!0},b.transports.push("jsonp-polling")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),typeof define=="function"&&define.amd&&define([],function(){return io})})()
/*! AdminLTE app.js
 * ================
 * Main JS application file for AdminLTE v2. This file
 * should be included in all pages. It controls some layout
 * options and implements exclusive AdminLTE plugins.
 *
 * @Author  Almsaeed Studio
 * @Support <http://www.almsaeedstudio.com>
 * @Email   <support@almsaeedstudio.com>
 * @version 2.1.0
 * @license MIT <http://opensource.org/licenses/MIT>
 */

'use strict';

//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("AdminLTE requires jQuery");
}

/* AdminLTE
 *
 * @type Object
 * @description $.AdminLTE is the main object for the template's app.
 *              It's used for implementing functions and options related
 *              to the template. Keeping everything wrapped in an object
 *              prevents conflict with other plugins and is a better
 *              way to organize our code.
 */
$.AdminLTE = {};

/* --------------------
 * - AdminLTE Options -
 * --------------------
 * Modify these options to suit your implementation
 */
$.AdminLTE.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "3px", //The width of the scroll bar
  navbarMenuHeight: "200px", //The height of the inner menu
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: true,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Bootstrap.js tooltip
  enableBSToppltip: true,
  BSTooltipSelector: "[data-toggle='tooltip']",
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before AdminLTE's app.js
  enableFastclick: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  }
};

/* ------------------
 * - Implementation -
 * ------------------
 * The next block of code implements AdminLTE's
 * functions and plugins as specified by the
 * options above.
 */
$(function () {
  //Extend options if external options exist
  if (typeof AdminLTEOptions !== "undefined") {
    $.extend(true,
            $.AdminLTE.options,
            AdminLTEOptions);
  }

  //Easy access to options
  var o = $.AdminLTE.options;

  //Set up the object
  _init();

  //Activate the layout maker
  $.AdminLTE.layout.activate();

  //Enable sidebar tree view controls
  $.AdminLTE.tree('.sidebar');

  //Enable control sidebar
  if (o.enableControlSidebar) {
    $.AdminLTE.controlSidebar.activate();
  }

  //Add slimscroll to navbar dropdown
  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
    $(".navbar .menu").slimscroll({
      height: o.navbarMenuHeight,
      alwaysVisible: false,
      size: o.navbarMenuSlimscrollWidth
    }).css("width", "100%");
  }

  //Activate sidebar push menu
  if (o.sidebarPushMenu) {
    $.AdminLTE.pushMenu.activate(o.sidebarToggleSelector);
  }

  //Activate Bootstrap tooltip
//  if (o.enableBSToppltip) {
//    $('body').tooltip({
//      selector: o.BSTooltipSelector
//    });
//  }

  //Activate box widget
  if (o.enableBoxWidget) {
    $.AdminLTE.boxWidget.activate();
  }

  //Activate fast click
  if (o.enableFastclick && typeof FastClick != 'undefined') {
    FastClick.attach(document.body);
  }

  //Activate direct chat widget
  if (o.directChat.enable) {
    $(o.directChat.contactToggleSelector).on('click', function () {
      var box = $(this).parents('.direct-chat').first();
      box.toggleClass('direct-chat-contacts-open');
    });
  }

  /*
   * INITIALIZE BUTTON TOGGLE
   * ------------------------
   */
  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
    var group = $(this);
    $(this).find(".btn").on('click', function (e) {
      group.find(".btn.active").removeClass("active");
      $(this).addClass("active");
      e.preventDefault();
    });

  });
});

/* ----------------------------------
 * - Initialize the AdminLTE Object -
 * ----------------------------------
 * All AdminLTE functions are implemented below.
 */
function _init() {

  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.AdminLTE.layout.activate()
   *        $.AdminLTE.layout.fix()
   *        $.AdminLTE.layout.fixSidebar()
   */
  $.AdminLTE.layout = {
    activate: function () {
      var _this = this;
      _this.fix();
      _this.fixSidebar();
      $(window, ".wrapper").resize(function () {
        _this.fix();
        _this.fixSidebar();
      });
    },
    fix: function () {
      //Get window height and the wrapper height
      var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height();
      //Set the min-height of the content and sidebar based on the
      //the height of the document.
      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
      } else {
        var postSetWidth;
        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        }

        //Fix for the control sidebar height
        var controlSidebar = $($.AdminLTE.options.controlSidebarOptions.selector);
        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth)
            $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }

      }
    },
    fixSidebar: function () {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({destroy: true}).height("auto");
        }
        return;
      } //else if (typeof $.fn.slimScroll == 'undefined' && console) {
//        console.error("Error: the fixed layout requires the slimscroll plugin!");
//      }
      //Enable slimscroll for fixed layout
      if ($.AdminLTE.options.sidebarSlimScroll) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $(".sidebar").slimScroll({destroy: true}).height("auto");
          //Add slimscroll
          $(".sidebar").slimscroll({
            height: ($(window).height() - $(".main-header").height()) + "px",
            color: "rgba(0,0,0,0.2)",
            size: "3px"
          });
        }
      }
    }
  };

  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.AdminLTE.pushMenu("[data-toggle='offcanvas']")
   */
  $.AdminLTE.pushMenu = {
    activate: function (toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.AdminLTE.options.screenSizes;

      //Enable sidebar toggle
      $(toggleBtn).on('click', function (e) {
        e.preventDefault();

        //Enable sidebar push menu
        if ($(window).width() > (screenSizes.sm - 1)) {
          $("body").toggleClass('sidebar-collapse');
        }
        //Handle sidebar push menu for small screens
        else {
          if ($("body").hasClass('sidebar-open')) {
            $("body").removeClass('sidebar-open');
            $("body").removeClass('sidebar-collapse')
          } else {
            $("body").addClass('sidebar-open');
          }
        }
      });

      $(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= (screenSizes.sm - 1) && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      });

      //Enable expand on hover for sidebar mini
      if ($.AdminLTE.options.sidebarExpandOnHover
              || ($('body').hasClass('fixed')
                      && $('body').hasClass('sidebar-mini'))) {
        this.expandOnHover();
      }

    },
    expandOnHover: function () {
      var _this = this;
      var screenWidth = $.AdminLTE.options.screenSizes.sm - 1;
      //Expand sidebar on hover
      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini')
                && $("body").hasClass('sidebar-collapse')
                && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini')
                && $('body').hasClass('sidebar-expanded-on-hover')
                && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function () {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function () {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };

  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.AdminLTE.tree('.sidebar')
   */
  $.AdminLTE.tree = function (menu) {
    var _this = this;

    $("li a", $(menu)).on('click', function (e) {
      //Get the clicked link and the next element
      var $this = $(this);
      var checkElement = $this.next();

      //Check if the next element is a menu and is visible
      if ((checkElement.is('.treeview-menu')) && (checkElement.is(':visible'))) {
        //Close the menu
        checkElement.slideUp('normal', function () {
          checkElement.removeClass('menu-open');
          //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });
        checkElement.parent("li").removeClass("active");
      }
      //If the menu is not visible
      else if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
        //Get the parent menu
        var parent = $this.parents('ul').first();
        //Close all open menus within the parent
        var ul = parent.find('ul:visible').slideUp('normal');
        //Remove the menu-open class from the parent
        ul.removeClass('menu-open');
        //Get the parent li
        var parent_li = $this.parent("li");

        //Open the target menu and add the menu-open class
        checkElement.slideDown('normal', function () {
          //Add the class active to the parent li
          checkElement.addClass('menu-open');
          parent.find('li.active').removeClass('active');
          parent_li.addClass('active');
          //Fix the layout in case the sidebar stretches over the height of the window
          _this.layout.fix();
        });
      }
      //if this isn't a link, prevent the page from being redirected
      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }
    });
  };

  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.AdminLTE.controlSidebar.activate(options)
   */
  $.AdminLTE.controlSidebar = {
    //instantiate the object
    activate: function () {
      //Get the object
      var _this = this;
      //Update options
      var o = $.AdminLTE.options.controlSidebarOptions;
      //Get the sidebar
      var sidebar = $(o.selector);
      //The toggle button
      var btn = $(o.toggleBtnSelector);

      //Listen to the click event
      btn.on('click', function (e) {
        e.preventDefault();
        //If the sidebar is not open
        if (!sidebar.hasClass('control-sidebar-open')
                && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      });

      //If the body has a boxed layout, fix the sidebar bg position
      var bg = $(".control-sidebar-bg");
      _this._fix(bg);

      //If the body has a fixed layout, make the control sidebar fixed      
      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function (sidebar, slide) {
      var _this = this;
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead 
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function (sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function (sidebar) {
      var _this = this;
      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());
        $(window).resize(function () {
          _this._fix(sidebar);
        });
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function (sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        'overflow': 'auto',
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function (sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };

  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.AdminLTE.boxWidget.activate()
   *        Set all your options in the main $.AdminLTE.options object
   */
  $.AdminLTE.boxWidget = {
    selectors: $.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,
    activate: function () {
      var _this = this;
      //Listen for collapse event triggers
      $(_this.selectors.collapse).on('click', function (e) {
        e.preventDefault();
        _this.collapse($(this));
      });

      //Listen for remove event triggers
      $(_this.selectors.remove).on('click', function (e) {
        e.preventDefault();
        _this.remove($(this));
      });
    },
    collapse: function (element) {
      var _this = this;
      //Find the box parent
      var box = element.parents(".box").first();
      //Find the body and the footer
      var box_content = box.find("> .box-body, > .box-footer");
      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.children(":first")
                .removeClass(_this.icons.collapse)
                .addClass(_this.icons.open);
        //Hide the content
        box_content.slideUp(300, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.children(":first")
                .removeClass(_this.icons.open)
                .addClass(_this.icons.collapse);
        //Show the content
        box_content.slideDown(300, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function (element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp();
    }
  };
}

/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */
(function ($) {

  $.fn.boxRefresh = function (options) {

    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function (box) {
      }, //Right after the button has been clicked
      onLoadDone: function (box) {
      } //When the source has been loaded

    }, options);

    //The overlay
    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (console) {
          console.log("Please specify a source first - boxRefresh()");
        }
        return;
      }
      //the box
      var box = $(this);
      //the button
      var rBtn = box.find(settings.trigger).first();

      //On trigger click
      rBtn.on('click', function (e) {
        e.preventDefault();
        //Add loading overlay
        start(box);

        //Perform ajax call
        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);

      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();

      settings.onLoadDone.call(box);
    }

  };

})(jQuery);

/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */
(function ($) {

  $.fn.todolist = function (options) {
    // Render options
    var settings = $.extend({
      //When the user checks the input
      onCheck: function (ele) {
      },
      //When the user unchecks the input
      onUncheck: function (ele) {
      }
    }, options);

    return this.each(function () {

      if (typeof $.fn.iCheck != 'undefined') {
        $('input', this).on('ifChecked', function (event) {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });

        $('input', this).on('ifUnchecked', function (event) {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onUncheck.call(ele);
        });
      } else {
        $('input', this).on('change', function (event) {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });
      }
    });
  };
}(jQuery));
/**
 * AdminLTE Demo Menu
 * ------------------
 * You should not use this file in production.
 * This file is for demo purposes only.
 */
(function ($, AdminLTE) {

  /**
   * List of all the available skins
   * 
   * @type Array
   */
  var my_skins = [
    "skin-blue",
    "skin-black",
    "skin-red",
    "skin-yellow",
    "skin-purple",
    "skin-green",
    "skin-blue-light",
    "skin-black-light",
    "skin-red-light",
    "skin-yellow-light",
    "skin-purple-light",
    "skin-green-light"
  ];

  //Create the new tab
  var tab_pane = $("<div />", {
    "id": "control-sidebar-theme-demo-options-tab",
    "class": "tab-pane active"
  });

  //Create the tab button
  var tab_button = $("<li />", {"class": "active"})
          .html("<a href='#control-sidebar-theme-demo-options-tab' data-toggle='tab'>"
                  + "<i class='fa fa-wrench'></i>"
                  + "</a>");

  //Add the tab button to the right sidebar tabs
  $("[href='#control-sidebar-home-tab']")
          .parent()
          .before(tab_button);

  //Create the menu
  var demo_settings = $("<div />");

  //Layout options
  demo_settings.append(
          "<h4 class='control-sidebar-heading'>"
          + "Layout Options"
          + "</h4>"
          //Fixed layout
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-layout='fixed' class='pull-right'/> "
          + "Fixed layout"
          + "</label>"
          + "<p>Activate the fixed layout. You can't use fixed and boxed layouts together</p>"
          + "</div>"
          //Boxed layout
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-layout='layout-boxed'class='pull-right'/> "
          + "Boxed Layout"
          + "</label>"
          + "<p>Activate the boxed layout</p>"
          + "</div>"
          //Sidebar Toggle
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-layout='sidebar-collapse' class='pull-right'/> "
          + "Toggle Sidebar"
          + "</label>"
          + "<p>Toggle the left sidebar's state (open or collapse)</p>"
          + "</div>"
          //Sidebar mini expand on hover toggle
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-enable='expandOnHover' class='pull-right'/> "
          + "Sidebar Expand on Hover"
          + "</label>"
          + "<p>Let the sidebar mini expand on hover</p>"
          + "</div>"
          //Control Sidebar Toggle
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-controlsidebar='control-sidebar-open' class='pull-right'/> "
          + "Toggle Right Sidebar Slide"
          + "</label>"
          + "<p>Toggle between slide over content and push content effects</p>"
          + "</div>"
          //Control Sidebar Skin Toggle
          + "<div class='form-group'>"
          + "<label class='control-sidebar-subheading'>"
          + "<input type='checkbox' data-sidebarskin='toggle' class='pull-right'/> "
          + "Toggle Right Sidebar Skin"
          + "</label>"
          + "<p>Toggle between dark and light skins for the right sidebar</p>"
          + "</div>"
          );
  var skins_list = $("<ul />", {"class": 'list-unstyled clearfix'});

  //Dark sidebar skins
  var skin_blue =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-blue' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px; background: #367fa9;'></span><span class='bg-light-blue' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Blue</p>");
  skins_list.append(skin_blue);
  var skin_black =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-black' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div style='box-shadow: 0 0 2px rgba(0,0,0,0.1)' class='clearfix'><span style='display:block; width: 20%; float: left; height: 7px; background: #fefefe;'></span><span style='display:block; width: 80%; float: left; height: 7px; background: #fefefe;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Black</p>");
  skins_list.append(skin_black);
  var skin_purple =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-purple' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-purple-active'></span><span class='bg-purple' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Purple</p>");
  skins_list.append(skin_purple);
  var skin_green =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-green' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-green-active'></span><span class='bg-green' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Green</p>");
  skins_list.append(skin_green);
  var skin_red =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-red' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-red-active'></span><span class='bg-red' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Red</p>");
  skins_list.append(skin_red);
  var skin_yellow =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-yellow' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-yellow-active'></span><span class='bg-yellow' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin'>Yellow</p>");
  skins_list.append(skin_yellow);

  //Light sidebar skins
  var skin_blue_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-blue-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px; background: #367fa9;'></span><span class='bg-light-blue' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px'>Blue Light</p>");
  skins_list.append(skin_blue_light);
  var skin_black_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-black-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div style='box-shadow: 0 0 2px rgba(0,0,0,0.1)' class='clearfix'><span style='display:block; width: 20%; float: left; height: 7px; background: #fefefe;'></span><span style='display:block; width: 80%; float: left; height: 7px; background: #fefefe;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px'>Black Light</p>");
  skins_list.append(skin_black_light);
  var skin_purple_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-purple-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-purple-active'></span><span class='bg-purple' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px'>Purple Light</p>");
  skins_list.append(skin_purple_light);
  var skin_green_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-green-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-green-active'></span><span class='bg-green' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px'>Green Light</p>");
  skins_list.append(skin_green_light);
  var skin_red_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-red-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-red-active'></span><span class='bg-red' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px'>Red Light</p>");
  skins_list.append(skin_red_light);
  var skin_yellow_light =
          $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-yellow-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-yellow-active'></span><span class='bg-yellow' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
                  + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
                  + "</a>"
                  + "<p class='text-center no-margin' style='font-size: 12px;'>Yellow Light</p>");
  skins_list.append(skin_yellow_light);

  demo_settings.append("<h4 class='control-sidebar-heading'>Skins</h4>");
  demo_settings.append(skins_list);

  tab_pane.append(demo_settings);
  $("#control-sidebar-home-tab").after(tab_pane);

  setup();

  /**
   * Toggles layout classes
   * 
   * @param String cls the layout class to toggle
   * @returns void
   */
  function change_layout(cls) {
    $("body").toggleClass(cls);
    AdminLTE.layout.fixSidebar();
    //Fix the problem with right sidebar and layout boxed
    if (cls == "layout-boxed")
      AdminLTE.controlSidebar._fix($(".control-sidebar-bg"));
    if ($('body').hasClass('fixed') && cls == 'fixed') {
      AdminLTE.pushMenu.expandOnHover();
      AdminLTE.controlSidebar._fixForFixed($('.control-sidebar'));
      AdminLTE.layout.activate();
    }
  }

  /**
   * Replaces the old skin with the new skin
   * @param String cls the new skin class
   * @returns Boolean false to prevent link's default action
   */
  function change_skin(cls) {
    $.each(my_skins, function (i) {
      $("body").removeClass(my_skins[i]);
    });

    $("body").addClass(cls);
    store('skin', cls);
    return false;
  }

  /**
   * Store a new settings in the browser
   * 
   * @param String name Name of the setting
   * @param String val Value of the setting
   * @returns void
   */
  function store(name, val) {
    if (typeof (Storage) !== "undefined") {
      localStorage.setItem(name, val);
    } else {
      alert('Please use a modern browser to properly view this template!');
    }
  }

  /**
   * Get a prestored setting
   * 
   * @param String name Name of of the setting
   * @returns String The value of the setting | null
   */
  function get(name) {
    if (typeof (Storage) !== "undefined") {
      return localStorage.getItem(name);
    } else {
      alert('Please use a modern browser to properly view this template!');
    }
  }

  /**
   * Retrieve default settings and apply them to the template
   * 
   * @returns void
   */
  function setup() {
    var tmp = get('skin');
    if (tmp && $.inArray(tmp, my_skins))
      change_skin(tmp);

    //Add the change skin listener
    $("[data-skin]").on('click', function (e) {
      e.preventDefault();
      change_skin($(this).data('skin'));
    });

    //Add the layout manager
    $("[data-layout]").on('click', function () {
      change_layout($(this).data('layout'));
    });

    $("[data-controlsidebar]").on('click', function () {
      change_layout($(this).data('controlsidebar'));
      var slide = !AdminLTE.options.controlSidebarOptions.slide;
      AdminLTE.options.controlSidebarOptions.slide = slide;
      if (!slide)
        $('.control-sidebar').removeClass('control-sidebar-open');
    });

    $("[data-sidebarskin='toggle']").on('click', function () {
      var sidebar = $(".control-sidebar");
      if (sidebar.hasClass("control-sidebar-dark")) {
        sidebar.removeClass("control-sidebar-dark")
        sidebar.addClass("control-sidebar-light")
      } else {
        sidebar.removeClass("control-sidebar-light")
        sidebar.addClass("control-sidebar-dark")
      }
    });
    
    $("[data-enable='expandOnHover']").on('click', function () {
      $(this).attr('disabled', true);      
      AdminLTE.pushMenu.expandOnHover();
      if(!$('body').hasClass('sidebar-collapse'))
        $("[data-layout='sidebar-collapse']").click();
    });
    
    // Reset options
    if($('body').hasClass('fixed')) {
      $("[data-layout='fixed']").attr('checked', 'checked');
    }
    if($('body').hasClass('layout-boxed')) {
      $("[data-layout='layout-boxed']").attr('checked', 'checked');
    }
    if($('body').hasClass('sidebar-collapse')) {
      $("[data-layout='sidebar-collapse']").attr('checked', 'checked');
    }
    
  }
})(jQuery, $.AdminLTE);
/**
 * Created by user on 22.09.15.
 */

angular.module('dbApp', ['indexedDB'])
.constant('DBSettings', {
    DBNAME: "myDB__test11"
})

.config(function ($indexedDBProvider, DBSettings) {
    $indexedDBProvider.connection(DBSettings.DBNAME).upgradeDatabase(3, function(event, db, tx) {
        var objStore = db.createObjectStore('workdays', { autoIncrement : true, keyPath: 'id'});
        objStore.createIndex('is_sync_idx', 'is_sync', {unique: false});
        objStore.createIndex('username_idx', 'username', {unique: false});
        objStore.createIndex('date_start_idx', 'date_start', {unique: false});
        objStore.createIndex('date_end_idx', 'date_end', {unique: false});
    });
})

.config(function ($indexedDBProvider, DBSettings) {
    $indexedDBProvider.connection(DBSettings.DBNAME).upgradeDatabase(1, function(event, db, tx) {
        var objStore = db.createObjectStore('session_items', { autoIncrement : true, keyPath: 'id'});
        objStore.createIndex('is_sync_idx', 'is_sync', {unique: false});
        objStore.createIndex('work_id_idx', 'work_id', {unique: false});
        objStore.createIndex('my_cool_idx', ['is_sync', 'work_id'], {unique: false});
    });
})

.config(function ($indexedDBProvider, DBSettings) {
    $indexedDBProvider.connection(DBSettings.DBNAME).upgradeDatabase(2, function(event, db, tx) {
        var objStore = db.createObjectStore('users', { autoIncrement : true, keyPath: 'id'});
        objStore.createIndex('name_idx', 'name', {unique: true});
    });
});
/**
 * Created by user on 31.07.15.
 */

angular.module('filters', [])
.filter('range', function() {
  return function(input, total) {
    total = parseInt(total);
    for (var i=0; i<total; i++)
      input.push(i);
    return input;
  };
})
.filter('yesNo', function() {
    return function(input) {
        return input ? 'ÐÐ°' : 'ÐÐµÑ';
    }
})

.filter('rub', function() {
  return function(input) {
      if (_.isNaN(input)) {
          return "";
      }
      else if (_.isNull(input)) {
          return "";
      }
      else if (_.isUndefined(input)) {
          return "";
      }
      else if (input == "") {
          return "";
      }
       else {
          return parseFloat(input).toFixed(2) + "<span class=\"min-spn\"> ÑÑÐ±.</span>";
      }
      //return input;
  };
})

.filter('propsFilter', function() {
    return function(items, props) {
        var out = [];

        if (angular.isArray(items)) {
          items.forEach(function(item) {
            var itemMatches = false;

            var keys = Object.keys(props);
            for (var i = 0; i < keys.length; i++) {
              var prop = keys[i];
              var text = props[prop].toLowerCase();
              if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                itemMatches = true;
                break;
              }
            }

            if (itemMatches) {
              out.push(item);
            }
          });
        } else {
          // Let the output be the input untouched
          out = items;
        }

        return out;
    }
});
/**
 * Created by user on 27.07.15.
 */

angular.module('form', ['ui.router'])

.factory("Form", function($q) {
    var form = undefined;
    return {
        setCurrentForm: function(fr) {
            form = fr;
        },
        isDirty: function(){
            return form && form.item && form.item.$dirty;
        },
        clearForm: function() {
            form = undefined;
        },
        updateView: function() {
            if (form && form.item) {
                form.item.$setPristine();
            }
        },
        isValid: function() {
            return form && form.item && form.item.$valid;
        },
        isSubmitted: function() {
            return form && form.item && form.item.$submitted;
        },
        setSubmitted: function() {
            form.item.$setSubmitted();
        },
        setPristine: function() {
            form.item.$setPristine();
        },

        getForm: function() {
            return form;
        }
    }
})
.run(function($rootScope, $state, Form) {
    $rootScope.$on('$stateChangeStart', function(event, toState, toStateParams) {
        // if the principal is resolved, do an authorization check immediately. otherwise,
        // it'll be done when the state it resolved.
        if(Form.isDirty()) {
            event.preventDefault();
            if (confirm("ÐÐ°Ð½Ð½ÑÐµ, ÐºÐ¾ÑÐ¾ÑÑÐµ ÐÑ ÑÐºÐ°Ð·Ð°Ð»Ð¸ Ð² ÑÐ¾ÑÐ¼Ð°Ñ, Ð½Ðµ Ð±ÑÐ´ÑÑ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ñ. ÐÑ ÑÐ¾ÑÐ¸ÑÐµ Ð¿ÐµÑÐµÐ¹ÑÐ¸?", "ÐÑ ÑÐ¾Ð±Ð¸ÑÐ°ÐµÑÐµÑÑ Ð¿Ð¾ÐºÐ¸Ð½ÑÑÑ ÑÑÑÐ°Ð½Ð¸ÑÑ.")) {
                Form.clearForm();
                $state.go(toState.name, toStateParams);
            }
        } else {
            Form.clearForm();
        }
    });
});
//'use strict';
AdminApp = angular.module('AdminApp', [
    'ui.router',
    'ui.select',
    'ui.bootstrap',

    'qtip2',

    'auth.ui',
    'auth.http',

    'core.service',
    'core.controllers',

    'mails.module',
    'mails.service',

    'invoice.service',
    'invoice.module',

    'waybill.module',
    'waybill.service',

    'provider.module',
    'provider.service',

    'commodity.module',
    'commodity.service',

    'good.module',
    'good.service',

    'collects.module',
    'collects.service',

    'acceptance.module',
    'acceptance.service',

    'pointsales.module',
    'pointsales.service',

    'receivers.module',
    'receivers.service',

    'users.module',
    'users.service',

    'session.module',
    'session.service',

    'user',
    'application',

    'utils',

    'filters',
    'directive',

    'ngTable',
    'angularSpinner',
    'ngSanitize',
    'ds.clock',
    'luegg.directives',


    'anguFixedHeaderTable',

    'Firestitch.angular-counter',
    'dbApp'
]);

AdminApp.factory('Device', function($window) {
    return {
        getIfDefined: function() {
            if (angular.isUndefined($window.localStorage.deviceId)) {
                this.gen();
            }
            return this.getId();
        },
        getId: function() {
            return $window.localStorage.deviceId;
        },
        gen: function() {
            $window.localStorage.deviceId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }
    }
});

AdminApp.factory('hIDScanner', function($rootScope, $window, $timeout) {
    var sub = false;
        return {
            initialize : function() {
                var chars = [];
                var pressed = false;
                sub = true;
                angular.element($window).on('keypress', function(e) {
                    if (e.which >= 48 && e.which <= 57) {
                        chars.push(String.fromCharCode(e.which));
                    }
                    // console.log(e.which + ":" + chars.join("|"));
                    if (pressed == false) {
                        $timeout(function(){
                            if (chars.length >= 10) {
                                var barcode = chars.join("");
                                $rootScope.$broadcast("hidScanner::scanned", {barcode: barcode});
                            }
                            chars = [];
                            pressed = false;
                        },250);
                    }
                    pressed = true;
                });
            },
            uninitialize: function() {
                if (sub) {
                    angular.element($window).unbind("keypress");
                }
            }
        };
    });

AdminApp.config(function ($interpolateProvider) {
    $interpolateProvider.startSymbol('[[').endSymbol(']]');
});

AdminApp.run(function($rootScope) {
    $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
        $rootScope.previousState = from;
        $rootScope.previousStateParams = fromParams;
    });
});

AdminApp.run(function ($rootScope, $timeout, $window) {
    $rootScope._ = _;

    $($window).on("message", function(e){
        console.log(e);
    });

    $timeout(function() {
        console.log("BLA!");
    }, 1000);

});

var MainController = function ($scope, $rootScope, User, Company, Application, mails, $state, principal) {

    $scope.is_superuser = User.is_superuser();

    $scope.userName = User.name();
    $scope.position = User.position();
    $scope.companyName = Company.name();
    $scope.companyNameShort = Company.nameShort();
    $scope.version = Application.version();
    $scope.authorLink = Application.authorLink();

    $scope.aboutMe = aboutMe;
    $scope.logout = logout;

    var socket;
    socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port); //, {resource: 'chat'});

    socket.on('connect', function () {
        socket.emit('connect', {data: 'I\'m connected!'});
    });

    socket.on('new mail', function (msg) {
        $rootScope.$apply(function () {
            mails.add(msg);
        });
    });

    socket.on("mail handle", function(resp) {
        $rootScope.$apply(function() {
            mails.remove(resp.id);
        });
    });

    function logout() {
        console.info("Unauthenticate.");
        principal.authenticate();
        $state.go("signin");
    }

    function aboutMe() {
        console.info("aboutMe");
        $state.go("index.user.view", {id: User.id()});
    }
};

AdminApp.factory("ShowHideRoles", function($state, principal) {
    return {
        showState: function(path) {
            var state = $state.get(path);
            var roles = state.data.roles || [];
            return principal.permissionRoles(roles);
        },
        showRole: function(roles) {
            return principal.permissionRoles(roles);
        }
    }
});

AdminApp.controller("MainController", MainController);

AdminApp.controller('HeaderController', function ($scope, $rootScope, mails, User, ShowHideRoles) {
    /*
    * ÐÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑ Ð²ÐµÑÑÐ½ÐµÐ¹ Ð¿Ð°Ð½ÐµÐ»Ð¸.
    * */
    $scope.messages = function() {return mails.all_new()};
    $scope.iconUrl = User.iconUrl();

    $scope.countNew = function () {
        return mails.countNew();
    };

    $scope.toggle = handlerToggleBtn;

    $scope.show = ShowHideRoles.showState;

    function handlerToggleBtn(event) {
        event.preventDefault();
        $rootScope.$broadcast("toggleSidebar");
    }
});

AdminApp.controller('SidebarController', function ($scope, $rootScope, ShowHideRoles, mails, User) {
    /*
    * ÐÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑ Ð±Ð¾ÐºÐ¾Ð²Ð¾Ð¹ Ð¿Ð°Ð½ÐµÐ»Ð¸.
    * */
    $scope.iconUrl = User.iconUrl();

    var status = $("#status-line > span");
    var icon = $("#status-line > i");

    $scope.countNew = function () {
        return mails.countNew();
    };

    $rootScope.$on("toggleSidebar", function(arg, value) {
        console.info("Event toggleSidebar");
        toggleSidebar(value ? value.value : undefined);
    });

    $rootScope.$on('online', function(arg, status) {
       if(status.status == true) {
           $scope.onLine();
       } else {
           $scope.offLine();
       }
    });

    $scope.onLine = function() {
        icon.removeClass("text-warning");
        icon.addClass("text-success");
        status.text("Online");
    };

    $scope.offLine = function() {
        icon.removeClass("text-success");
        icon.addClass("text-warning");
        status.text("Offline");
    };

    $scope.show = ShowHideRoles.showState;

    //TODO Ð¼Ð°Ð³Ð¸Ñ
    var stateSidebar = {
        toggle: window.innerWidth < 768
    };

    function toggleSidebar(value) {

        if (value != undefined) {
            if (value != stateSidebar.toggle) {
                changeTog();
                stateSidebar.toggle = value;
            }
        } else {
            changeTog();
            stateSidebar.toggle = !stateSidebar.toggle;
        }

        function changeTog() {
            var screenSizes = $.AdminLTE.options.screenSizes;

            //Enable sidebar push menu
            if ($(window).width() > (screenSizes.sm - 1)) {
              $("body").toggleClass('sidebar-collapse');
            }
            //Handle sidebar push menu for small screens
            else {
              if ($("body").hasClass('sidebar-open')) {
                $("body").removeClass('sidebar-open');
                $("body").removeClass('sidebar-collapse')
              } else {
                $("body").addClass('sidebar-open');
              }
            }
        }
    }
});

//Ð¡ÐµÑÐ²Ð¸Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð´Ð°Ð½Ð½ÑÑ
//ÐÑÐ¸Ð¼ÐµÑ:
//ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð´Ð°Ð½Ð½ÑÑ Ð¿ÑÐ¾ÑÐ¸Ð»Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð´Ð¾ Ð¿Ð¾ÐºÐ°Ð·Ð° ÑÑÑÐ°Ð½Ð¸ÑÑ.
AdminApp.service('LoadData', function($state, $rootScope, $q) {
    return {
        change: function() {
            var q = $q.defer();
            q.promise.then(function() {
                if ($rootScope.toState.name != 'index.load') {
                    $rootScope.toStateLoad = $rootScope.toState;
                    $rootScope.toStateLoadParams = $rootScope.toStateParams;
                    $state.go('index.load');
                }
            });

            q.resolve();

            return q.promise;
        }
    }
});

AdminApp.config(function ($stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise("/");

    $stateProvider.state('site', {
        'abstract': true,
        resolve: {
            authorize: ['authorization', function (authorization) {
                return authorization.authorize();
            }],
            loadData: function(LoadData) {
                return LoadData.change();
            }
        }
    })

        .state('signin', {
            url: '/signin',
            views: {
                'main@': {
                    templateUrl: '/static/newadmin/template/login.html',
                    controller: function ($scope, $rootScope, $state, principal) {
                        $scope.loadingFinish = true;
                        $scope.signin = function () {

                            var btn_sub = $("button[type='submit']");
                            btn_sub.prop('disabled', true);

                            $scope.loadingFinish = false;

                            principal.authenticate({
                                login: $scope.login,
                                password: $scope.password
                            }).then(successAuthenticate, failureAuthenticate);

                            function successAuthenticate() {
                                btn_sub.prop('disabled', false);
                                $scope.loadingFinish = true;
                                $scope.is_error = false;
                                if ($scope.returnToState) {
                                    $state.go($scope.returnToState.name, $scope.returnToStateParams);
                                }
                                else {
                                    //ÐÑÐ»Ð¸ Ð¿ÑÐ°Ð²Ð° Ð²ÑÐ´Ð°Ð½Ñ ÑÐ¾Ð»ÑÐºÐ¾ ÐºÐ°Ðº Ð½Ð° Ð¿ÑÐ¾Ð´Ð°Ð²ÑÐ° - ÑÐ¾ Ð´ÐµÐ»Ð°ÐµÐ¼ Ð¿ÐµÑÐµÑÐ¾Ð´ Ð½Ð° Ð²ÑÐ±Ð¾Ñ ÑÐ°Ð±Ð¾ÑÐµÐ³Ð¾ Ð´Ð½Ñ
                                    var id = principal.getIdentity();
                                    if (id.length == 1 && id.indexOf("vendor") != -1) {
                                        console.info("You are only vendor. Go to vendor's menu.");
                                        $state.go('index.session.menu');
                                    } else {
                                        console.info("Don't you are not only vendor. Go to dash.");
                                        $state.go('index.dash');
                                    }
                                }
                            }

                            function failureAuthenticate(message) {
                                $scope.error = message;
                                btn_sub.prop('disabled', false);
                                $scope.loadingFinish = true;
                                $scope.is_error = true;
                            }
                        };
                    }
                }
            }
        })

        .state('index.accessdenied', {
            url: '/403',
            views: {
                'content': {
                    templateUrl: "/static/newadmin/template/403.html",
                    controller: function() {

                    }
                }
            }
        })

        .state('index', {
            parent: 'site',
            abstract: true,
            views: {
                'main@': {
                    templateUrl: "/static/newadmin/template/admin.html",
                    controller: 'MainController'
                }
            }
        })

        .state('index.load', {
            views: {
                'main@': {
                    templateUrl: "/static/newadmin/template/load.html",
                    controller: function($scope, $q, $rootScope, $state, $timeout, mails, User, Application, Company) {

                        $scope.max = 100;
                        $scope.type = 'info';

                        $scope.companyName = Company.name();

                        $scope.version = Application.version();
                        $scope.authorLink = Application.authorLink();

                        $scope.dynamic = 0;

                        $q.all([mails.fetch().then(function() {
                            $timeout(function() {
                                $scope.dynamic += 50;
                            }, 300);

                        }, function(isOnline) {
                            $timeout(function() {
                                $scope.dynamic += 50;
                            }, 300);
                        }), User.fetch().then(function() {
                            $timeout(function() {
                                $scope.dynamic += 50;
                            }, 700);
                        }, function() {
                            $timeout(function() {
                                $scope.dynamic += 50;
                            }, 700);
                        })]).then(function() {
                            $timeout(function() {
                                $state.go($rootScope.toStateLoad.name, $rootScope.toStateLoadParams);
                            }, 1500);
                        });
                    }
                }
            }
        })

        .state('index.dash', {
            url: '/',
            views: {
                'content': {
                    templateUrl: '/static/newadmin/template/dash.html',
                    controller: function ($scope, $rootScope, Application, ShowHideRoles, mails) {
                        $scope.version = Application.version();
                        $scope.showRole = ShowHideRoles.showRole;

                        $scope.checkMail = checkMail;

                        $scope.newAcceptance = newAcceptance;

                        function checkMail($event) {
                            var button = $event.target;
                            disableButton(button, true);
                            mails.checkMail().then(function(res) {
                                if(res == "ok") {
                                    toastr.info("ÐÑÑÑ Ð½Ð¾Ð²ÑÐµ Ð¿Ð¸ÑÑÐ¼Ð°. ÐÐ»Ñ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ° Ð¿ÐµÑÐµÐ¹Ð´Ð¸ÑÐµ Ð¿Ð¾ <a href='/admin#/mailbox?_new=true&page=1'>ÑÑÑÐ»ÐºÐµ</a>", "ÐÐ¿Ð¾Ð²ÐµÑÐµÐ½Ð¸Ñ");
                                } else if (res == "nothing") {
                                    toastr.info("ÐÐµÑÑ Ð½Ð¾Ð²ÑÑ Ð¿Ð¸ÑÐµÐ¼", "ÐÐ¿Ð¾Ð²ÐµÑÐµÐ½Ð¸Ñ", {"closeButton": true, "progressBar": true});
                                }
                                disableButton(button, false);
                            });
                        }

                        function newAcceptance($event) {
                            var button = $event.target;
                            disableButton(button, true);
                            console.log("new ACCEPTANCE");
                        }

                        function disableButton(element, comp) {
                            $(element).prop('disabled', comp);
                        }
                    }
                }
            }
        });
});
AdminApp.run(function($rootScope) {

});

AdminApp.directive('icheck', function() {
    return {
        link: function(scope, element, attr) {
            element.iCheck({
              checkboxClass: 'icheckbox_minimal-red',
              radioClass: 'iradio_minimal-red'
            });
        }
    }
});

AdminApp.directive('tree', function() {
    return {
        link: function(scope, element, attr) {

            $("li a", element).on('click', function (e) {
              //Get the clicked link and the next element
              var $this = $(this);
              var checkElement = $this.next();

              //Check if the next element is a menu and is visible
              if ((checkElement.is('.treeview-menu')) && (checkElement.is(':visible'))) {
                //Close the menu
                checkElement.slideUp('normal', function () {
                  checkElement.removeClass('menu-open');
                  //Fix the layout in case the sidebar stretches over the height of the window
                  //_this.layout.fix();
                });
                checkElement.parent("li").removeClass("active");
              }
              //If the menu is not visible
              else if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
                //Get the parent menu
                var parent = $this.parents('ul').first();
                //Close all open menus within the parent
                var ul = parent.find('ul:visible').slideUp('normal');
                //Remove the menu-open class from the parent
                ul.removeClass('menu-open');
                //Get the parent li
                var parent_li = $this.parent("li");

                //Open the target menu and add the menu-open class
                checkElement.slideDown('normal', function () {
                  //Add the class active to the parent li
                  checkElement.addClass('menu-open');
                  parent.find('li.active').removeClass('active');
                  parent_li.addClass('active');
                  //Fix the layout in case the sidebar stretches over the height of the window
//                  _this.layout.fix();
                    $.AdminLTE.layout.fix();
                });
              } else {
                  parent = $this.parent("li");
                  ul_core = parent.parent("ul");
                  var active = ul_core.find("li.active");
                  ul = active.find("ul:visible").slideUp("normal");

                  active.removeClass('active');
                  ul.removeClass('menu-open');

                  parent.addClass('active');

              }
              //if this isn't a link, prevent the page from being redirected
              if (checkElement.is('.treeview-menu')) {
                e.preventDefault();
              }
            });
        }
    }
});

AdminApp.directive('myAutoPadding', ['$document', "$rootScope", function($document, $rootScope) {
  return {
    link: function(scope, element, attr) {

      var handl = function() {

        var prev = element.prev();
        if (prev) {
            var height = prev.height();
            element.css("padding-top", height + 15);
        }
      };

        $document.on("resize", handl);

        $rootScope.$on('$viewContentLoaded',
        function(event, toState, toParams, fromState, fromParams){
            handl();
        });

        handl();
    }
  };
}]);

AdminApp.directive('contentWr', function() {
    return {
        link: function(scope, element) {
            var window_height = $(window).height();
            if ($("body").hasClass("fixed")) {
                element.css('min-height', window_height - $('.main-footer').outerHeight());
            }
        }
    }
});

AdminApp.directive("headerFixedScroll", function($document, $window, $timeout) {
    return {
        link: function(scope, element) {
            var f_el = $('*').filter(function() {return $(this).css("position") === 'fixed';}).last();
            var f_el_top = f_el.position()['top'] + f_el.height();
            var window_scroll_top;
            var flatElement;
            var topFlatElement;

            var func_resize = function() {
                f_el_top = f_el.position()['top'] + f_el.height();
                resizeTh(true);
                if (flatElement) {
                    flatElement.css('top', f_el_top);
                }
            };

            var func_scroll = function() {
                var topOriginal = element[0].getClientRects()[0].top;

                if (flatElement) {
                    topFlatElement = flatElement[0].getClientRects()[0].top;
                }

                if (topOriginal < f_el_top) {

                    if (!angular.isDefined(window_scroll_top)) {
                        flatElement = $(element[0].cloneNode(true));
                        flatElement.removeAttr("header-fixed-scroll");
                        flatElement.css('position', 'fixed');
                        flatElement.css('top', f_el_top);
                        flatElement.css('z-index', 98);

                        resizeTh();

                        element.parent().append(flatElement);
                        window_scroll_top = $document.scrollTop();
                    }

                }
                else if (topFlatElement && topFlatElement == f_el_top) {
                    if($document.scrollTop() < window_scroll_top) {
                        window_scroll_top = undefined;
                        flatElement.remove();
                        flatElement = undefined;
                    }
                }
            };

            var unwatch = scope.$watch(function() {
                return angular.element(element.parent().parent())[0].rows.length;
            }, function() {
                $timeout(func_resize, 0);
            });

            angular.element($window).on('resize', func_resize);
            $document.on('scroll', func_scroll);

            scope.$on('$destroy', function() {
                angular.element($window).off('resize', func_resize);
                $document.off('scroll', func_scroll);
                unwatch();
            });

            function resizeTh(res) {
                if (flatElement) {
                    for(var i = 0; i < element.children().length; i++) {
                        var child = $(element.children()[i]);
                        var width = child.innerWidth();
                        if (res) {
                            width = child.width();
                        }
                        $(flatElement.children()[i]).width(width);
                    }
                }
            }
        }
    }
});

AdminApp.factory('ConfigWidgets', function() {
    return {
        defaultConfigDatepicker: function(attr_value) {

            var conf = {};

            conf.datepickers = {
                dt: false
            };
            conf.today = function() {
                attr_value = new Date();
            };
            conf.today();
            conf.showWeeks = true;
            conf.toggleWeeks = function () {
                conf.showWeeks = ! conf.showWeeks;
            };
            conf.clear = function () {
                attr_value = null;
            };
            conf.toggleMin = function() {
                conf.minDate = ( conf.minDate ) ? null : new Date();
            };
            conf.toggleMin();
            conf.open = function($event, condition_func) {
                if (angular.isUndefined(condition_func) || !angular.isUndefined(condition_func) && !condition_func()) {
                    conf.status.opened = true;
                }
            };
            conf.status = {
                opened: false
            };
            conf.dateOptions = {
                'year-format': "'yy'",
                'starting-day': 1
            };

            return conf;
        }
    }
});
/**
 * Created by user on 04.08.15.
 */

angular.module('directive', []).directive('dictSelectField', function($compile, $modal) {
    return {
        restrict: 'E',
        transclude: true,
        require: ["^ngModel"],
        scope: {
            service: "=",
            lazy: "&",
            select: "=",
            onSelect: "=",
            dname: "@",
            drequired: "@",
            dngRequired: "@",
            dngDisabled: "&",
            canCreate: "&",
            canEdit: "&",
            multiple: "&"
        },
        templateUrl: '/static/newadmin/template/directive/dsf.html',
        controller: function($scope, $q) {
            $scope.modelsss = {};

            var lazy =  $q.defer();

            $scope.open = function() {
                lazy.resolve();
            };

            if(angular.isUndefined($scope.canCreate())) {
                $scope.canCreate = function() {
                    return true;
                }
            }
            if(angular.isUndefined($scope.canEdit())) {
                $scope.canEdit = function() {
                    return true;
                }
            }

            $scope.select_item = function() {
                $scope.select = $scope.modelsss.item.id;
                if($scope.onSelect) {
                    $scope.onSelect($scope.modelsss.item);
                }
            };

            $scope.refresh = function(text) {
                if($scope.lazy()) {
                    lazy.promise.then(function() {
                        $scope.service.records(text).then(function(resp) {
                            $scope.$items = resp;
                        });
                    })
                } else {
                    $scope.service.records(text).then(function(resp) {
                        $scope.$items = resp;
                    });
                }
            };

            $scope.create = function() {
                if (!$scope.disabled) {
                    var modalInstance = $modal.open({
                        template: $scope.service.template(),
                        controller: $scope.service.controller(),
                        size: $scope.service.size(),
                        resolve: $scope.service.resolve()
                    });
                    modalInstance.result.then(function (model) {
                        $scope.modelsss.item = model;
                    }, function () {

                    });
                }
            };

            $scope.edit = function() {
                if (!$scope.disabled) {
                    var modalInstance = $modal.open({
                        template: $scope.service.templateEdit(),
                        controller: $scope.service.controllerEdit(),
                        size: $scope.service.size(),
                        resolve: $scope.service.resolveEdit($scope.modelsss.item)
                    });
                    modalInstance.result.then(function (model) {
                        $scope.modelsss.item = model;
                    }, function () {

                    });
                }
            }
        },
        compile: function(tElement, tAttrs, transclude) {
            var ngat = tElement.attr('ng-model');
            return function (scope, element, attr, ngModel, transFn) {

                //HUCK
                //Ð¿ÑÐ¾ÐºÐ¸Ð´ÑÐ²Ð°ÐµÐ¼ ÑÐºÐ¾ÑÐ¿ Ð² Ð´Ð¸ÑÐµÐºÑÐ¸Ð²Ñ... Ð¿ÑÐ¸ÑÐ¸Ð½Ð° - Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¼Ð¾ÑÑÑ Ð¿Ð¸ÑÐ°ÑÑ Ð²ÑÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð² Ð´Ð¸ÑÐµÐºÑÐ¸Ð²Ð°Ñ Ñ
                //model
                scope.model = scope.$parent.model;

                //Ð¡Ð»ÐµÐ´Ð¸Ð¼ Ð·Ð° Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸ÐµÐ¼ Ð¼Ð¾Ð´ÐµÐ»Ð¸
                scope.$watch(function () {
                  return ngModel[0].$modelValue;
               }, function(newValue) {
                   scope.modelsss.item = newValue;
               });

                scope.$watch("modelsss.item", function(newValue) {
                    if (ngModel[0].$viewValue !== newValue) {
                        ngModel[0].$setViewValue(newValue);
                    }
                });

                ngModel.$render = function() {
                    scope.modelsss.item = ngModel.$viewValue;
                };

                var uiselect, par;

                transFn(function (clone) {
                    var transcluded = angular.element('<div>').append(clone);
                    var uiselects = element.querySelectorAll('ui-select-s');

                    var transcludedMatch = transcluded.querySelectorAll('dict-select-field-match');
                    var transcludedChoices = transcluded.querySelectorAll('dict-select-field-choices');

                    var uimatchs = uiselects.querySelectorAll('ui-select-match-s'),
                        uichoicess = uiselects.querySelectorAll('ui-select-choices-s'),
                        btns = element.querySelectorAll('div.dsf-btns');

                    uiselect = angular.element('<ui-select>');

                    var uimatch = angular.element('<ui-select-match>'),
                        uichoices = angular.element('<ui-select-choices>');


                    function copyAttr(element1, element2, copytext) {
                        if (!angular.isDefined(element1[0])) {
                            return
                        }
                        var attrs = element1[0].attributes;
                        for (var i = 0; i < attrs.length; i++) {
                            element2.attr(attrs[i].name, element1.attr(attrs[i].name));
                        }
                        if (copytext === true) {
                            element2.html(element1.html());
                        }

                    }

                    if(scope.multiple()) {
                        uiselect.attr("multiple", "true");
                        scope.$items = [];
                    }

                    if(scope.dname) {
                        uiselect.attr("name", scope.dname);
                        tElement.removeAttr("dname");
                    }
                    if (scope.drequired) {
                        uiselect.attr("required", true);
                        tElement.removeAttr('drequired');
                    }

                    if (scope.dngRequired) {
                        uiselect.attr('ng-required', scope.dngRequired);
                        tElement.removeAttr('dng-required');
                    }

                    if (scope.dngDisabled) {
                        scope.disabled = scope.dngDisabled();
                    }

                    copyAttr(uiselects, uiselect);
                    copyAttr(uimatchs, uimatch, true);
                    copyAttr(uichoicess, uichoices, true);

                    copyAttr(transcludedMatch, uimatch, true);
                    copyAttr(transcludedChoices, uichoices, true);

                    uiselect.append(uimatch);
                    uiselect.append(uichoices);

                    par = uiselects.parent();
                    par.children().remove();
                    par.append(uiselect);
                    par.append(btns);
                });

                var fn = $compile(par);
                element.append(fn(scope));
            }
        }
    };
})

.directive('modelTable', function() {
        return {
            require: ['ngModel', '^form'],
            compile: function ngModelCompile(element) {
              return {
                pre: function ngModelPreLink(scope, element, attr, ctrls) {
                  var modelCtrl = ctrls[0],
                      formCtrl = ctrls[1];

                  var attrN = attr['ngModel'];

                  scope.$watch(attrN, function(newValue, oldValue) {
                      if (!angular.equals(newValue, oldValue)) {
                          formCtrl.$setDirty();
                      }

                  });
                  formCtrl.$addControl(modelCtrl);

                  attr.$observe('name', function(newValue) {
                    if (modelCtrl.$name !== newValue) {
                      formCtrl.$$renameControl(modelCtrl, newValue);
                    }
                  });

                  scope.$on('$destroy', function() {
                    formCtrl.$removeControl(modelCtrl);
                  });
                },
                post: function ngModelPostLink(scope, element, attr, ctrls) {
                  var modelCtrl = ctrls[0];
                  if (modelCtrl.$options && modelCtrl.$options.updateOn) {
                    element.on(modelCtrl.$options.updateOn, function(ev) {
                      modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                    });
                  }

//                  element.on('blur', function(ev) {
//                    if (modelCtrl.$touched) return;
//
//                    if ($rootScope.$$phase) {
//                      scope.$evalAsync(modelCtrl.$setTouched);
//                    } else {
//                      scope.$apply(modelCtrl.$setTouched);
//                    }
//                  });
                }
              };
            }
        }
    })

.directive('passport', function() {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, ngModelController) {
            ngModelController.$parsers.push(function(data) {
                //convert data from view format to model format
                var m = data.toString(), datas = data.toString();
                m.replace("/\s/g", "");
                return m; //converted
            });

            ngModelController.$formatters.push(function(data) {
                //convert data from model format to view format
//                var datas = data.toString();
                return parseInt(data, 10);
            });

//            ngModelController.$validators.VAL = function(model, view) {
//                debugger
//                return '/^\d{0}$|^\d{10}$/'.test(model);
//            };
        }
    }
});
/**
 * Created by user on 27.07.15.
 */

angular.module("core.utils", [])

.factory("remoteHelper", function($http) {
        return {
            itemById: function(url, id) {
                return $http.get(url + "/" + id).then(function(resp){
                    return resp.data;
                });
            },
            itemsByIds: function(url, ids) {
                return $http.get(url, {params: {'ids': ids}}).then(function(resp){
                    return resp.data;
                });
            },
            filterItems: function(url, params) {
                var prms = angular.copy(params);

                prms['count'] = params['count'] || 10;
                prms['page'] = params['page'] || 1;

                return $http.get(url, {params: prms});
            },
            createParams: function(text, field, page, count) {
                var params = {};
                if (text) {
                    params['filter_text'] = text;
                    params['filter_field'] = field ? field : 'filter_field';
                }
                params['page'] = page ? page : 1;
                params['count'] = count ? count : 10;
                return params;
            },
            update: function(url, id, params) {
                return $http.post(url + "/" + id, {data: params});
            },
            create: function(url, params) {
                return $http.put(url, {data: params});
            },
            delete_: function(url, id) {
                return $http.delete(url + "/" + id);
            }
        }
    });
/**
 * Created by user on 27.07.15.
 */

angular.module("core.helpers", [])
.factory('Base64', function() {
    var keyStr = 'ABCDEFGHIJKLMNOP' +
            'QRSTUVWXYZabcdef' +
            'ghijklmnopqrstuv' +
            'wxyz0123456789+/' +
            '=';
    return {
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                        keyStr.charAt(enc1) +
                        keyStr.charAt(enc2) +
                        keyStr.charAt(enc3) +
                        keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        },

        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                alert("There were invalid base64 characters in the input text.\n" +
                        "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                        "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };
})
/**
 * Created by user on 29.07.15.
 */

angular.module("core.controllers", ['ui.router', 'form', 'ngTable'])
.controller("BaseCreateController", function($scope, $rootScope, $state, Form, $timeout, $q) {

    $scope.loadingFinish = true;
    $scope.model = {};

    $scope.Form = Form;

    $scope.cancel = function () {
        $scope.loadingFinish = false;
        if($state.$current.parent && !$state.$current.parent.self.abstract) {
            $state.go($state.$current.parent.self.name, $state.toStateParams).then(function() {
                $scope.loadingFinish = true;
            });
        }
        else if(!$rootScope.previousState.abstract && $rootScope.previousState.name != 'index.load') {
            $state.go($rootScope.previousState, $rootScope.previousStateParams).then(function() {
                $scope.loadingFinish = true;
            });
        } else {
            if (angular.isUndefined($scope._goCancel)) {
                $state.go($scope.goList()).then(function() {
                    $scope.loadingFinish = true;
                });
            } else {
                $scope._goCancel();
            }
        }
    };

    $scope._goCancel = undefined;

    $scope._goAfterSave = undefined;

    $scope._doFailSave = undefined;

    $scope.save = function() {
        if($scope.validate()) {
            $scope.loadingFinish = false;
            $scope.saveToServer().then(function(resp) {
                Form.updateView();
                $scope.loadingFinish = true;
                if(angular.isUndefined($scope._goAfterSave)) {
                    $state.go($scope.goView(), {id: resp.data.id}, {reload: $scope.goView()});
                } else {
                    $scope._goAfterSave(resp.data.id);
                }

            }, function(resp) {
                $scope.loadingFinish = true;
                if (!angular.isUndefined($scope._doFailSave)) {
                    $scope._doFailSave(resp);
                }
            });
        } else {
            console.warn("Form is not valid.", Form.getForm().item.$error);
            Form.setSubmitted();
        }
    };

    $scope.saveToServer = function() {
        var q = $q.defer();
        $timeout(function(){
            q.resolve();
        }, 3000);
        return q.promise;
    };

    $scope.validate = function() {
        return Form.isValid();
    };

    $scope.myForm = {};

    Form.setCurrentForm($scope.myForm);

    $scope.goList = function() {
        return "";
    };

    $scope.goView = function() {
        return "";
    };
})

.controller("BaseListController", function($scope, $stateParams, $state, ngTableParams) {
    $scope.page = 1;
    $scope.countPerPage = 10;

    if ($stateParams.filter) {
        $scope.searchText = $stateParams.filter;
    }
    if ($stateParams.page) {
        $scope.page = parseInt($stateParams.page);
    }
    $scope.loadingFinish = true;

    $scope.goList = function() {
        return "";
    };

    $scope.goCreate = function() {
        return "";
    };

    $scope.goView = function() {
        return "";
    };

    $scope.getService = function() {
        return undefined;
    };

    $scope.tableParams = new ngTableParams({
            page: $scope.page,            // show first page
            count: 10,          // count per page
            sorting: {
                name: 'asc'     // initial sorting
            }
        },
        {
            total: 0, // length of data
            counts: [], // hide page counts control
            getData: function ($defer, params) {
                // use build-in angular filter
                var orig_page_func = params.page;
                params.page = function (arg) {
                    if (angular.isDefined(arg)) {
                        $scope.checkPage(arg);
                    } else {
                        return orig_page_func();
                    }
                };

                $scope.loadingFinish = false;

                $scope.getService().filter($scope.searchText, $scope.page, params.count()).then(
                    function (data) {
                        $defer.resolve(data);
                        params.total($scope.getService().count());
                        $scope.loadingFinish = true;
                    });
            }
        }
    );

    $scope.checkPage = function(arg) {
        $state.go($scope.goList(), {filter: $scope.searchText, page: arg});
    };

    $scope.detail = function (id) {
        $scope.loadingFinish = false;
        $state.go($scope.goView(), {id: id}).then(function () {
            $scope.loadingFinish = true;
        });
    };

    $scope.filter = function (text) {
        $state.go($scope.goList(), {filter: text, page: 1});
    };

    $scope.create = function () {
        $state.go($scope.goCreate());
    };
});
/**
 * Created by user on 04.08.15.
 */

angular.module('core.service', ['core.utils'])
.factory('BaseModelService', function(remoteHelper, $q) {

    return {
        cnt: 0,
        _getPath: function() {
            return "";
        },
        _setCount: function(count) {
            this.cnt = count;
        },
        filter: function(text, page, count) {
            var self = this;
            var params = remoteHelper.createParams(text, undefined, page, count);
            return remoteHelper.filterItems(self._getPath(), params).then(function(resp) {
                self._setCount(resp.data.max);
                return resp;
            });
        },
        count: function() {
            return this.cnt;
        },
        getById: function(id) {
            return remoteHelper.itemById(this._getPath(), id);
        },

        getByIds: function(ids) {
            return remoteHelper.itemsByIds(this._getPath(), ids);
        },

        update: function(id, params) {
            var q = $q.defer();
            remoteHelper.update(this._getPath(), id, params).then(function(resp) {q.resolve(resp);}, function(resp) {
                toastr.error(resp.data.message, "ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ð¸ Ð·Ð°Ð¿Ð¸ÑÐ¸!");
                q.reject();
            });
            return q.promise;
        },
        create: function(params) {
            var q = $q.defer();
            remoteHelper.create(this._getPath(), params).then(function(resp) {q.resolve(resp);}, function(resp) {
                toastr.error(resp.data.message, "ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ð¸ Ð·Ð°Ð¿Ð¸ÑÐ¸!");
                q.reject();
            });
            return q.promise;
        },
        delete_: function(id) {
            var q = $q.defer();
            remoteHelper.delete_(this._getPath(), id).then(function(resp) {q.resolve(resp);}, function(resp) {
                toastr.error(resp.data.message, "ÐÑÐ¸Ð±ÐºÐ° Ð¿ÑÐ¸ ÑÐ´Ð°Ð»ÐµÐ½Ð¸Ð¸ Ð·Ð°Ð¿Ð¸ÑÐ¸!");
                q.reject();
            });
            return q.promise;
        }
    }
})
.factory("BaseDictService", function($controller) {
    var ser = {
        records: function() {
            return [];
        },

        formInclude: function() {
            return "";
        },

        title: function(){
            return "I'm a modal!";
        },

        titleEdit: function() {
            return "Edit modal!";
        },

        controller: function() {
            return function ($scope, $modalInstance) {
                $scope.cancel = function() {
                    $modalInstance.dismiss('cancel');
                };

                $scope.ok = function() {
                    console.log("CONTROLLER CREATE!!");
                };
            }
        },

        controllerEdit: function() {
            return function($scope, $modalInstance, item) {
                $controller(ser.controller(), {$scope: $scope, $modalInstance: $modalInstance});
                $scope.ok = function() {
                    console.log("CONTROLLER EDIT!!");
                };

                $scope.model = item;
            }
        },

        resolve: function() {
            return {

            }
        },

        resolveEdit: function() {
            return {

            }
        },

        template: function() {
            return '<div class="modal-header">' +
                   '<h3 class="modal-title">' + this.title() + '</h3>' +
                   '</div>' +
                   '<div class="modal-body">' +
                   '<div ng-include="\'' + this.formInclude() + '\'">' +
                   '</div>' +
                   '</div>' +
                   '<div class="modal-footer">' +
                   '<button class="btn btn-flat btn-primary" ng-click="ok()">Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ</button>' +
                   '<button class="btn btn-flat btn-warning" ng-click="cancel()">ÐÐ°ÐºÑÑÑÑ</button>' +
                   '</div>';
        },

        templateEdit: function() {
            return '<div class="modal-header">' +
                   '<h3 class="modal-title">' + this.titleEdit() + '</h3>' +
                   '</div>' +
                   '<div class="modal-body">' +
                   '<div ng-include="\'' + this.formInclude() + '\'">' +
                   '</div>' +
                   '</div>' +
                   '<div class="modal-footer">' +
                   '<button class="btn btn-flat btn-primary" ng-click="ok()">ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ</button>' +
                   '<button class="btn btn-flat btn-warning" ng-click="cancel()">ÐÐ°ÐºÑÑÑÑ</button>' +
                   '</div>';
        },

        size: function() {
            return 'lg';
        }
    };

    return ser;
});
/**
 * Created by user on 02.07.15.
 */

angular.module('mails.service', ['core.utils'])

.factory('mails', function($http, $q, remoteHelper) {
    var path = '/api/mail';
    var cnt = 0;
    var items = [];
    var items_id = [];
    var items_new = [];
    var current_id = undefined;

    var factory = {};

    factory.handle_mail = function(id, index, action) {
        return $http.post("/api/mail/" + id, {index: index, action: action});
    };

    factory.checkMail = function() {
        return $http.post('/api/mail').then(function(resp) {
            return resp.data;
        });
    };

    factory.checkMailAndLoadItems = function($stateParams) {
        var q = $q.defer(),
            self = this;

        self.checkMail().then(function (res) {
            self.filterToStateParams($stateParams).then(function(items) {
                q.resolve([res, items]);
            });
        }).catch(function() {
            q.reject();
        });

        return q.promise;
    };

    factory.fetch = function() {
        return $http.get("/api/mail", {params: {'_new': true}}).then(function(resp) {
            items_new = resp.data.items;
        }, function(resp) {
            var isOnline = true;
            if (resp.status == 0) {isOnline = false; items_new = [];}
            return isOnline;
        });
    };

    factory.add = function(item) {
        items_new.push(item);
    };

    factory.remove = function(id) {
        items_new = _.filter(items_new, function(item) {
            if (item.id != id) return true;
        });
    };

    factory.all_new = function() {
        return items_new;
    };

    factory.countNew = function() {
        return items_new.length;
    };

    factory.setCurrent = function(item) {
        current_id = item.id;
    };

    factory.getById = function(id) {
        return remoteHelper.itemById(path, id);
    };

    factory.hasNext = function() {
        if (!angular.isUndefined(current_id) && [-1, 9].indexOf(items_id.indexOf(current_id)) === -1) {
            return true;
        }
    };

    factory.hasPrev = function() {
        if (!angular.isUndefined(current_id) && [-1, 0].indexOf(items_id.indexOf(current_id)) === -1) {
            return true;
        }
    };

    factory.getNext = function() {
        if(factory.hasNext()) {
            return items_id[items_id.indexOf(current_id) + 1];
        }
    };
    factory.getPrev = function() {
        if(factory.hasPrev()) {
            return items_id[items_id.indexOf(current_id) - 1];
        }
    };

    factory.filterToStateParams = function(stateParams) {
        return factory.filter(stateParams.filter, stateParams.page, stateParams.count, stateParams._new)
    };

    factory.filter = function(text, page, count, _new) {
        var params = remoteHelper.createParams(text, 'title', page, count);
        if (_new) {
            params['_new'] = _new;
        }

        return remoteHelper.filterItems(path, params).then(function(resp) {
            cnt = resp.data.max;
            items = resp.data.items;
            items_id = _.map(items, function(item) {return item.id});
            return items;
        }, function() {
            return [];
        });
    };

    factory.count = function() {
        return cnt;
    };

    return factory;
});


/**
 * Created by user on 20.08.15.
 */

angular.module("mails.module", ['ui.router'])
.config(function($stateProvider) {
     $stateProvider.state('index.mailbox', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: "/mailbox",
            views: {
                'content': {
                    templateUrl: "/static/newadmin/js/applications/mail/template/base.html"
                }
            }
        })

        .state('index.mailbox.list', {
            url: "?_new&filter&page",
            views: {
                'head': {
                    templateUrl: "/static/newadmin/js/applications/mail/template/list.head.html",
                    controller: "MailListController"
                },
                'item': {
                    templateUrl: "/static/newadmin/js/applications/mail/template/list.html",
                    controller: "MailListController"
                }
            },
            resolve: {
                mailitems: ['mails', '$stateParams',
                    function (mails, $stateParams) {
                        return mails.filterToStateParams($stateParams);
                    }]
            }
        })

        .state('index.mailbox.list.read', {
            url: "/{mailId:[0-9]{1,10}}",

            resolve: {
                item: function ($stateParams, mails) {
                    return mails.getById(parseInt($stateParams.mailId));
                }
            },
            views: {
                'head@index.mailbox': {
                    templateUrl: "/static/newadmin/js/applications/mail/template/read.head.html",
                    controller: function ($scope, item, mails) {
                        $scope.item = item;
                    }
                },
                '': {
                    templateUrl: "/static/newadmin/js/applications/mail/template/read.html",
                    controller: function ($scope, $stateParams, $state, item, mails, mailLoading) {
                        mails.setCurrent(item);
                        $scope.item = item;

                        $scope.loading = mailLoading;

                        $scope.hasNext = mails.hasNext;
                        $scope.hasPrev = mails.hasPrev;

                        $scope.rashod = function(event, index) {
                            showSpinner();

                            mails.handle_mail($scope.item.id, index, 'R').then(function(data) {
                                $state.go('index.invoice.view', {id: data.data.invoice_id}).then(function() {
                                    hideSpinner();
                                });
                            }).catch(function() {
                                showError("ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð½Ð°ÐºÐ»Ð°Ð´Ð½ÑÑ ÐºÐ°Ðº ÑÐ°ÑÑÐ¾Ð´. ÐÐ±ÑÐ°ÑÐ¸ÑÐµÑÑ Ðº Ð°Ð´Ð¼Ð¸Ð½Ð¸ÑÑÑÐ°ÑÐ¾ÑÑ.");
                                hideSpinner();
                            });
                        };

                        $scope.prev = function() {
                            if (mails.hasPrev()) {
                                showSpinner();
                                $state.go('index.mailbox.list.read', {mailId: mails.getPrev()}).then(function() {
                                    hideSpinner();
                                });
                            }
                        };

                        $scope.next = function() {
                            if (mails.hasNext()) {
                                showSpinner();
                                $state.go('index.mailbox.list.read', {mailId: mails.getNext()}).then(function() {
                                    hideSpinner();
                                });
                            }
                        };

                        function showError(message) {
                            toastr.error(message, "ÐÑÐ¸Ð±ÐºÐ°!");
                            $scope.loading.listLoading = false;
                        }

                        function showSpinner() {
                            $scope.loading.listLoading = false;
                        }

                        function hideSpinner() {
                            $scope.loading.listLoading = true;
                        }
                    }
                }
            }

        });
})
.value("mailLoading", {
    listLoading: true
})
.factory('MailItems', function() {
    var items = [];
    return {
        setItems: function(itms) {
            items = itms;
        },
        getItems: function() {
            return items;
        }
    }
})
.controller("MailListController", function ($scope, $state, $timeout, mailitems, mailLoading, MailItems, mails, $stateParams) {

        $scope.loading = mailLoading;
        $scope.mailitems = MailItems;
        hideSpinner();

        $scope.page = 1;
        $scope.countPerPage = 10;

        setItems(mailitems);

        function freezeInterface(button) {
            disableButton(button, true);
            showSpinner();
        }

        function unfreezeInterface(button) {
            disableButton(button, false);
            hideSpinner();
        }

        $scope.checkMail = function ($event) {
            var button = $event.target;

            freezeInterface(button);

            mails.checkMailAndLoadItems($stateParams).then(function(res_items) {
                var res = res_items[0],
                    items = res_items[1];
                setItems(items);

                unfreezeInterface(button);

                if(res == "ok") {
                    toastr.info("ÐÑÑÑ Ð½Ð¾Ð²ÑÐµ Ð¿Ð¸ÑÑÐ¼Ð°. ÐÐ»Ñ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ° Ð¿ÐµÑÐµÐ¹Ð´Ð¸ÑÐµ Ð¿Ð¾ <a href='/admin#/mailbox?_new=true&page=1'>ÑÑÑÐ»ÐºÐµ</a>", "ÐÐ¿Ð¾Ð²ÐµÑÐµÐ½Ð¸Ñ");
                } else if (res == "nothing") {
                    toastr.info("ÐÐµÑÑ Ð½Ð¾Ð²ÑÑ Ð¿Ð¸ÑÐµÐ¼", "ÐÐ¿Ð¾Ð²ÐµÑÐµÐ½Ð¸Ñ", {"closeButton": true, "progressBar": true});
                }
            }).catch(function() {
                showError("ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð¿ÑÐ¾Ð²ÐµÑÐ¸ÑÑ Ð¿Ð¾ÑÑÑ. ÐÐ±ÑÐ°ÑÐ¸ÑÐµÑÑ Ðº Ð°Ð´Ð¼Ð¸Ð½Ð¸ÑÑÑÐ°ÑÐ¾ÑÑ.");
                unfreezeInterface(button);
            });

        };

        if ($stateParams.filter) {
            $scope.searchText = $stateParams.filter;
        }
        if ($stateParams.page) {
            $scope.page = parseInt($stateParams.page);
        }

        $scope.boxTitle = $stateParams._new === "true" ? "ÐÐ¾Ð²ÑÐµ" : "Inbox";

        $scope.next = function () {
            if ($scope.hasNext()) {
                showSpinner();
                $state.go('index.mailbox.list', {filter: $scope.searchText, page: $scope.page + 1});
            }
        };

        $scope.prev = function () {
            if ($scope.hasPrev()) {
                showSpinner();
                $state.go('index.mailbox.list', {filter: $scope.searchText, page: $scope.page - 1});
            }
        };

        $scope.hasPrev = function () {
            return $scope.page > 1;
        };

        $scope.hasNext = function () {
            return $scope.page < mails.count() / $scope.countPerPage;
        };

        $scope.filter = function (text) {
            showSpinner();
            $state.go('index.mailbox.list', {filter: text, page: 1});
        };

        $scope.count = function () {
            return mails.count();
        };

        $scope.countNew = function () {
            return mails.countNew();
        };

        $scope.countNewM = function () {
            return mails.countNew();
        };

        function disableButton(element, comp) {
            $(element).prop('disabled', comp);
        }

        function showError(message) {
            toastr.error(message, "ÐÑÐ¸Ð±ÐºÐ°!");
            hideSpinner();
        }

        function setItems(items) {
            $scope.mailitems.setItems(items);
        }

        function showSpinner() {
            $scope.loading.listLoading = false;
        }

        function hideSpinner() {
            $scope.loading.listLoading = true;
        }
    }
);
/**
 * Created by user on 02.09.15.
 */

/**
 * Created by user on 14.08.15.
 */

angular.module('invoice.module', ['core.controllers', 'pointsales.service']).constant('InvoiceConfig', {
    name: "Ð Ð°ÑÑÐ¾Ð´Ð½ÑÐµ Ð½Ð°ÐºÐ»Ð°Ð´Ð½ÑÐµ",
    formname: "InvoiceForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("InvoiceForm", $http.get("/static/newadmin/js/applications/invoice/template/form.html"));
})


.config(function($stateProvider) {
    $stateProvider.state('index.invoice', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/invoice'
        })
        .state('index.invoice.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/invoice/template/list.html",
                    controller: "InvoiceListCntr"
                }
            }
        })
        .state('index.invoice.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/invoice/template/create.html",
                    controller: "InvoiceCreateCntr"
                }
            }
        })
        .state('index.invoice.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/invoice/template/view.html",
                    controller: "InvoiceViewCntr"
                }
            },
            resolve: {
                item: function(invoices, $stateParams) {
                    return invoices.getById(parseInt($stateParams.id))
                },
                items: function(invoices, $stateParams) {
                    return invoices.getItems(parseInt($stateParams.id));
                },
                pointcentral: function(pointsales) {
                    return pointsales.getCentralPoint();
                },
                pointslave: function(pointsales) {
                    return pointsales.getSlavePoint();
                }
            }
        })
        .state('index.invoice.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/invoice/template/edit.html",
                    controller: "InvoiceEditCntr"
                }
            },
            resolve: {
                items: function(invoices, $stateParams) {
                    return invoices.getRowInvoiceIn(parseInt($stateParams.id));
                }
            }
        })
})

.controller("InvoiceListCntr", function($scope, $controller, InvoiceConfig, invoices) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = InvoiceConfig.name;

    $scope.goCreate = function() {
        return "index.invoice.create";
    };

    $scope.goView = function() {
        return "index.invoice.view";
    };

    $scope.goList = function() {
        return "index.invoice.list";
    };

    $scope.getService = function() {
        return invoices;
    };
})

.controller("InvoiceCreateCntr", function($scope, $controller, invoices, InvoiceConfig) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = InvoiceConfig.name;

    $scope.formname =  InvoiceConfig.formname;

    $scope.saveToServer = function() {
        return invoices.create($scope.model);
    };

    $scope.goView = function() {
        return "index.invoice.view";
    };
})

.controller("InvoiceEditCntr", function($scope, $controller, $state, item, items, invoices, InvoiceConfig) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.name_head = InvoiceConfig.name;
    $scope.formname =  InvoiceConfig.formname;

    $scope.goView = function() {
        return "index.invoice.view";
    };

    $scope.model = item;
    $scope.model.items = items;

    $scope.loadingFinish = true;

    $scope._goCancel = function() {
        $state.go("index.invoice.view", {mailId: $scope.item.id});
    };

    $scope.save = function() {
        $scope.loadingFinish = false;

        invoices.savePriceFromInvoice($scope.model.id, $scope.model.items).then(function() {

            $state.go("index.invoice.view", {mailId: $scope.model.id}, {reload: 'index.invoice.view'}).then(function() {
                $scope.loadingFinish = true;
            });
//            toastr.success("ÐÐ¾Ð¶Ð½Ð¾ Ð¿ÐµÑÐµÑÐ¾Ð´Ð¸ÑÑ Ðº ÑÐ»ÐµÐ´ÑÑÑÐµÐ¼Ñ Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ " +
//                "<a href='/admin2#/invoice_in/create_bulk?from_pointsale_id=1&to_pointsale_ids=%5B8,7,6,5,2%5D&invoice_from="+ $scope.model.id +"'>Ð¿Ð»Ð¸Ð¸Ð¸!!</a>.", "Ð¦ÐµÐ½Ñ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ñ!");

        }, function(resp) {
            toastr.error(resp.data.message, "Ð¦ÐµÐ½Ñ Ð½Ðµ ÑÐ¾ÑÑÐ°Ð½ÐµÐ½Ñ!");
            $scope.loadingFinish = true;
        });
    };
})

.controller("InvoiceViewCntr", function($scope, $stateParams, $state, InvoiceConfig, invoices, item, items, pointcentral, pointslave) {
    $scope.name_head = InvoiceConfig.name;

    $scope.loadingFinish = true;

    var id = $stateParams.id;
    $scope.model = item;
    $scope.model.items = items;

    $scope.edit = function() {
        $scope.loadingFinish = false;
        $state.go('index.invoice.view.edit', {id: id}).then(function() {
            $scope.loadingFinish = true;
        });

    };

    $scope.createBulk = function() {
        $scope.loadingFinish = false;
        var from_pointsale_id = '', to_pointsale_ids = '';
        if (pointcentral) {
            from_pointsale_id = pointcentral.id;
        }
        if (pointslave) {
            to_pointsale_ids = _.map(pointslave, function(item) {return item.id});
            to_pointsale_ids = "[" + to_pointsale_ids.join(",") + "]";
        }
        $state.go('index.invoice_in.bulk', {
            from_pointsale_id: from_pointsale_id,
            to_pointsale_ids: to_pointsale_ids,
            invoice_from: id}).then(function() {
            $scope.loadingFinish = true;
        });
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            invoices.delete_(id).then(function(){
                $state.go("index.invoice.list");
            });
        }
    };
});
/**
 * Created by user on 24.08.15.
 */

angular.module('invoice.service', ['core.service'])

.factory('InvoiceService', function(BaseDictService, invoices) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return invoices.filter(text);
    };

    return child;
})


.factory('invoices', function(BaseModelService, $http) {
    var path = '/api/invoice_canon';

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return path;
    };

    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            return resp.data.items;
        });
    };

    child.getItems = function(id) {
        return $http.get("/api/invoice_canon/" + id + "/items").then(function(resp) {
            return resp.data.items;
        });
    };

    child.getRowInvoiceIn = function(id) {
        return $http.get("/api/invoiceprice2items/" + id).then(function(resp) {
            return resp.data.items;
        });
    };

    child.savePriceFromInvoice = function(id, items) {
        return $http.post("/api/pricebulkinvoice", {data: {invoice_id: id, items: items}}).then(function(resp) {
            return resp;
        });
    };

    return child;
});
/**
 * Created by user on 03.07.15.
 */

angular.module('waybill.service', ['core.service'])

.factory('waybills', function($http, BaseModelService) {
    var path = '/api/waybill';

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return path;
    };

    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            return resp.data.items;
        });
    };

    child.createBulk = function(data) {
        return $http.post("/api/waybillbulk", data);
    };

    return child;
})

.factory('waybillstatus', function($http) {
    return {
        doStatus: function(id, number) {
            return $http.post("/api/waybill/" + id + "/status", {data: {status: number}});
        }
    }
})

.factory('waybillprint', function($http) {
    return {
        print: function(id) {
            return $http.get("/api/waybill/print/" + id);
        },
        printBulk: function(ids) {
            var par = {
                'ids': JSON.stringify(ids)
            };

            return $http.get("/api/waybill/print_bulk", {params: par});
        }
    }
})

.factory("invoice_canon_items", function($http) {
        return {
            all: function(id, excl_ids) {
                var par = {};
                if (excl_ids) {
                    par['exclude_good_id'] = JSON.stringify(excl_ids);
                }
                return $http.get('/api/invoice_canon/' + id + '/items', {params: par}).then(function(resp) {
                    return resp.data;
                });
            }
        }
})

.factory('waybillitems', function($http) {
        return {
            all: function(id) {
                return $http.get('/api/waybill/' + id + '/items').then(function(resp) {
                    return resp.data.items;
                });
            }
        };
    });
angular.module("waybill.module", ['ui.router', 'core.controllers', 'waybill.service'])

.run(function($templateCache, $http) {
    $templateCache.put('InvoiceInForm', $http.get("/static/newadmin/js/applications/waybill/template/form_.html"));

    $templateCache.put("InvoiceSelectGood", $http.get("/static/newadmin/js/applications/waybill/template/selectgood.html"));
})

.config(function($stateProvider) {
    $stateProvider.state('index.invoice_in', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/invoice_in'
        })

        .state('index.invoice_in.bulk', {
            url: '/create_bulk?from_pointsale_id&to_pointsale_ids&invoice_from',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/waybill/template/page_bulk.html",
                    controller: function($scope, $controller, $state, $modal, frompointsale, topointsale, invoice_items, waybills) {
                        $controller('InvoiceInCreateCntr', {$scope: $scope});

                        if(frompointsale) {
                            $scope.model.pointSource = frompointsale;
                            $scope.model.pointsale_from_id = frompointsale.id;
                        }
                        if(topointsale) {
                            $scope.model.pointReceiver = topointsale;
                        }
                        if(invoice_items) {
                            $scope.model.items = invoice_items;
                        } else {
                            $scope.model.items = [];
                        }

                        $scope.saveToServer = function() {
                            return waybills.createBulk($scope.model);
                        };

                        $scope._goAfterSave = function(id) {
                            $state.go("index.invoice_in.list");
                        };

                        $scope._doFailSave = function() {
                            toastr.error(resp.data.message, "ÐÑÐ¸Ð±ÐºÐ°!!!");
                        };

                        $scope.removeRow = function(row) {
                            if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ Ð¸Ð· Ð½Ð°ÐºÐ»Ð°Ð´Ð½Ð¾Ð¹?")) {
                                $scope.model.items = _.without($scope.model.items, row);
                            }
                        };

                        $scope.openWindowSelect = function() {
                            var modalInstance = $modal.open({
                                templateUrl: 'InvoiceSelectGood',
                                controller: function($scope, ngTableParams, $modalInstance, arrayhelp, invoice_canon_items, excl_id, InvoiceService) {

                                    var items = [];

                                    $scope.ok = function () {
                                        $modalInstance.close(
                                            arrayhelp.getElemsByIds(_.keys($scope.checkboxes.items), items));
                                    };

                                    $scope.cancel = function () {
                                        $modalInstance.dismiss('cancel');
                                    };

                                    $scope.InvoiceService = InvoiceService;

                                    $scope.invoiceSelect = function(item) {

                                        $scope.item_id = item.id;

                                        $scope.tableParams.reload();
                                        $scope.loadingFinish = false;
                                    };

                                    $scope.tableParams = new ngTableParams({
                                        page: 0,            // show first page
                                        count: 200,          // count per page
                                        sorting: {
                                            name: 'asc'     // initial sorting
                                        }
                                    },
                                    {
                                        total: 0, // length of data
                                        counts: [], // hide page counts control
                                        getData: function ($defer, params) {
                                            if($scope.item_id) {
                                                invoice_canon_items.all($scope.item_id, excl_id).then(function(invoice_items_data) {
                                                    items = invoice_items_data.items;
                                                    params.total(invoice_items_data.count);
                                                    $scope.loadingFinish = true;

                                                    $defer.resolve(items);
                                                })
                                            } else {
                                                $scope.loadingFinish = true;
                                            }
                                        }
                                    });

                                    $scope.checkboxes = { 'checked': false, items: {} };

                                    // watch for check all checkbox
                                    $scope.$watch('checkboxes.checked', function(value) {
                                        angular.forEach(items, function(item) {
                                            if (angular.isDefined(item.id)) {
                                                $scope.checkboxes.items[item.id] = value;
                                            }
                                        });
                                    });

                                    // watch for data checkboxes
                                    $scope.$watch('checkboxes.items', function(values) {
                                        if (!items) {
                                            return;
                                        }
                                        var checked = 0, unchecked = 0,
                                                total = items.length;
                                        angular.forEach(items, function(item) {
                                            checked   +=  ($scope.checkboxes.items[item.id]) || 0;
                                            unchecked += (!$scope.checkboxes.items[item.id]) || 0;
                                        });
                                        if ((unchecked == 0) || (checked == 0)) {
                                            $scope.checkboxes.checked = (checked == total);
                                        }
                                        // grayed checkbox
                                        angular.element(document.getElementById("select_all")).prop("indeterminate", (checked != 0 && unchecked != 0));
                            }, true);

                                },
                                backdrop: "static",
                                size: "lg",
                                resolve: {
                                    excl_id: function() {
                                        return _.map($scope.model.items, function(item) { return item.good_id });
                                    }
                                }
                            });
                            modalInstance.result.then(function (items) {
                                items = _.map(items, function(item) {
                                    item.count = '';
                                    return item;
                                });
                                $scope.model.items = $scope.model.items.concat(items);
                            }, function () {
                            });
                        }
                    }
                }
            },
            resolve: {
                frompointsale: function(pointsales, $stateParams) {
                    if($stateParams.from_pointsale_id) {
                        return pointsales.getById(parseInt($stateParams.from_pointsale_id));
                    }
                },
                topointsale: function(pointsales, $stateParams) {
                    if($stateParams.to_pointsale_ids) {
                        return pointsales.getByIds($stateParams.to_pointsale_ids).then(function(resp) {return resp.items});
                    }
                },
                invoice_items: function(invoice_canon_items, $stateParams) {
                    if($stateParams.invoice_from) {
                        return invoice_canon_items.all($stateParams.invoice_from).then(function(resp) {return resp.items;});
                    }
                }
            }
        })

        .state('index.invoice_in.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/waybill/template/list_.html",
                    controller: "InvoiceInListController"
                }
            }
        })

        .state('index.invoice_in.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/waybill/template/create_.html",
                    controller: "InvoiceInCreateCntr"
                }
            }
        })

        .state('index.invoice_in.view', {
            url: '/:id',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/waybill/template/read_.html",
                    controller: "InvoiceInViewCntr"
                }
            },
            resolve: {
                items: function (waybillitems, $stateParams) {
                    return waybillitems.all($stateParams.id);
                },
                item: function (waybills, $stateParams) {
                    return waybills.getById(parseInt($stateParams.id));
                },
                pointSource: function(item, pointsales) {
                    return pointsales.getById(item.pointsale_from_id);
                },
                pointReceiver: function(item, pointsales) {
                    if(item.pointsale_id) {
                        return pointsales.getById(item.pointsale_id);
                    }
                },
                receiver: function(item, receivers) {
                    if (item.receiver_id) {
                        return receivers.getById(item.receiver_id);
                    }
                }
            }
        })

        .state('index.invoice_in.view.edit', {
            url: '/edit',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/waybill/template/read_create.html",
                    controller: "InvoiceInEditCntr"
                }
            }
        })
})
.controller("InvoiceInListController", function ($scope, $stateParams, $state, ngTableParams, waybills, waybillprint, $controller) {
    $controller('BaseListController', {$scope: $scope});

    $scope.goList = function() {
        return 'index.invoice_in.list';
    };

    $scope.goCreate = function() {
        return "index.invoice_in.create";
    };

    $scope.goView = function() {
        return 'index.invoice_in.view';
    };

    $scope.getService = function() {
        return waybills;
    };

    $scope.createBulk = function() {
        $state.go("index.invoice_in.bulk");
    };

    $scope.printBulk = function() {

        var ids = _.map(_.filter(_.pairs($scope.checkboxes.items), function(item) {
            return item[1];
        }), function(item) {
            return parseInt(item[0]);
        });

        waybillprint.printBulk(ids).then(function(resp) {
            var url = resp.data.link;
            window.open(url, "_target");
        })
    };


    $scope.checkboxes = { 'checked': false, items: {} };

    // watch for check all checkbox
    $scope.$watch('checkboxes.checked', function(value) {
        var items = $scope.tableParams.data;
        angular.forEach(items, function(item) {
            if (angular.isDefined(item.id)) {
                $scope.checkboxes.items[item.id] = value;
            }
        });
    });

    // watch for data checkboxes
    $scope.$watch('checkboxes.items', function(values) {
        //debugger
        var items = $scope.tableParams.data;
        if (!items) {
            return;
        }
        var checked = 0, unchecked = 0,
                total = items.length;
        angular.forEach(items, function(item) {
            checked   +=  ($scope.checkboxes.items[item.id]) || 0;
            unchecked += (!$scope.checkboxes.items[item.id]) || 0;
        });
        if ((unchecked == 0) || (checked == 0)) {
            $scope.checkboxes.checked = (checked == total);
        }
        // grayed checkbox
        angular.element(document.getElementById("select_all")).prop("indeterminate", (checked != 0 && unchecked != 0));
    }, true);
})

.controller('InvoiceInViewCntr', function ($scope, $state, $stateParams, waybillstatus, waybills, waybillprint, item, items,
                                           pointSource, pointReceiver, receiver, Company) {

    var id = $stateParams.id;
    $scope.model = item;
    $scope.item = item;
    $scope.items = items;
    $scope.loadingFinish = true;

    $scope.model.pointSource = pointSource;
    $scope.model.pointReceiver = pointReceiver;
    $scope.model.receiver = receiver;

    $scope.toStatus = function(number) {
        if(number == 4) {
            if(confirm("ÐÑ Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÐµ Ð½Ð°ÐºÐ»Ð°Ð´Ð½ÑÑ Ð² ÑÐ¸Ð½Ð°Ð»ÑÐ½ÑÐ¹ ÑÑÐ°ÑÑÑ (ÐºÐ¾Ð³Ð´Ð° ÑÐ¾Ð²Ð°Ñ ÑÐ¶Ðµ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÑÑ Ð´Ð¾ÑÑÐ°Ð²Ð»ÐµÐ½). " +
                "ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ! ÐÐ¿ÐµÑÐ°ÑÐ¸Ñ Ð½ÐµÐ¾Ð±ÑÐ°ÑÐ¸Ð¼Ð°Ñ.")){
                doIt();
            }
        } else {
            doIt();
        }

        function doIt(){
            $scope.loadingFinish = false;
            waybillstatus.doStatus($scope.model.id, number).then(function() {
                $state.go('index.invoice_in.view', {id: $scope.model.id}, {reload: 'index.invoice_in.view'}).then(function() {
                    $scope.loadingFinish = true;
                });
            });
        }
    };

    $scope.print = function() {
        waybillprint.print(id).then(function(resp) {
            var url = resp.data.link;
            window.open(url, "_target");
        })
    };

    $scope.edit = function() {
        $state.go('index.invoice_in.view.edit', {id: $stateParams.id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            waybills.delete_(id).then(function(){
                $state.go("index.invoice_in.list");
            });
        }
    };

    $scope.nameInvoice = Company.nameInvoice();

    $scope.price_item = function (row) {
        return $scope.model.type === 1 ? row.good.price.price_retail : row.good.price.price_gross;
    }

    $scope.sum_item = function (row) {
        var price = $scope.price_item(row);
        return row.count * price;
    }

    $scope.getTotal = function () {
        var total = 0;
        for (var i = 0; i < $scope.items.length; i++) {
            var product = $scope.items[i];
            var price = $scope.price_item(product);
            // var price = $scope.model.type === 1 ? product.good.price.price_retail : product.good.price.price_gross;
            total += (product.count * price);
        }
        return total;
    }
})

.controller('InvoiceInCreateCntr', function ($scope, $state, Form, waybills, pointsales, receivers,
                                             Company, $controller, $q, PointService, ReceiverService) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.model.typeRec = 1;
    $scope.model.type = 1;

    $scope.nameInvoice = Company.nameInvoice();

    $scope.goList = function() {
        return 'index.invoice_in.list';
    };

    $scope.PointService = PointService;
    $scope.ReceiverService = ReceiverService;

    $scope.datepickers = {
        dt: false
    };
    $scope.today = function() {
        $scope.model.date = new Date();
    };
    $scope.today();
    $scope.showWeeks = true;
    $scope.toggleWeeks = function () {
        $scope.showWeeks = ! $scope.showWeeks;
    };
    $scope.clear = function () {
        $scope.model.date = null;
    };
    $scope.toggleMin = function() {
        $scope.minDate = ( $scope.minDate ) ? null : new Date();
    };
    $scope.toggleMin();
    $scope.open = function($event) {
        if(!$scope.editForm) {
            $scope.status.opened = true;
        }
    };
    $scope.status = {
        opened: false
    };
    $scope.dateOptions = {
        'year-format': "'yy'",
        'starting-day': 1
    };

    $scope.saveToServer = function() {
        return waybills.create($scope.model);
    };

    $scope.goView = function() {
        return "index.invoice_in.view";
    };
})

.controller('InvoiceInEditCntr', function($scope, $state, $controller, $stateParams, $modal,
                                        waybills, item, items, pointSource, pointReceiver,
                                        receiver) {
    $controller('InvoiceInCreateCntr', {$scope: $scope});

    $scope.item = angular.copy(item);
    $scope.model = $scope.item;
    $scope.model.items = angular.copy(items);
    $scope.model.pointSource = pointSource;
    $scope.model.pointReceiver = pointReceiver;
    $scope.model.receiver = receiver;

    $scope.tableEdit = $scope.model.status == 2;
    $scope.editForm = !(!$scope.model.status || $scope.model.status == 1);

    $scope.removeRow = function(row) {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ Ð¸Ð· Ð½Ð°ÐºÐ»Ð°Ð´Ð½Ð¾Ð¹?")) {
            $scope.model.items = _.without($scope.model.items, row);
        }
    };

    $scope.goList = function() {
        return 'index.invoice_in.list';
    };

    $scope._goAfterSave = function(id) {
        $state.go($scope.goView(), {id: id}, {reload: 'index.invoice_in.view'});
    };

    $scope.saveToServer = function() {
        return waybills.update(parseInt($stateParams.id), $scope.model);
    };

    $scope.openWindowSelect = function() {
        var modalInstance = $modal.open({
            templateUrl: "static/newadmin/js/applications/waybill/template/w_add_from_invoice.html",
            controller: function($scope, ngTableParams, $modalInstance, arrayhelp, invoice_canon_items, excl_id, InvoiceService) {

                var items = [];

                $scope.ok = function () {
                    $modalInstance.close(
                        arrayhelp.getElemsByIds(_.keys($scope.checkboxes.items), items));
                };

                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };

                $scope.InvoiceService = InvoiceService;

                $scope.invoiceSelect = function(item) {

                    $scope.item_id = item.id;

                    $scope.tableParams.reload();
                    $scope.loadingFinish = false;
                };

                $scope.tableParams = new ngTableParams({
                    page: 0,            // show first page
                    count: 200,          // count per page
                    sorting: {
                        name: 'asc'     // initial sorting
                    }
                },
                {
                    total: 0, // length of data
                    counts: [], // hide page counts control
                    getData: function ($defer, params) {
                        if($scope.item_id) {
                            invoice_canon_items.all($scope.item_id, excl_id).then(function(invoice_items_data) {
                                items = invoice_items_data.items;
                                params.total(invoice_items_data.count);
                                $scope.loadingFinish = true;

                                $defer.resolve(items);
                            })
                        } else {
                            $scope.loadingFinish = true;
                        }
                    }
                });

                $scope.checkboxes = { 'checked': false, items: {} };

                // watch for check all checkbox
                $scope.$watch('checkboxes.checked', function(value) {
                    angular.forEach(items, function(item) {
                        if (angular.isDefined(item.id)) {
                            $scope.checkboxes.items[item.id] = value;
                        }
                    });
                });

                // watch for data checkboxes
                $scope.$watch('checkboxes.items', function(values) {
                    if (!items) {
                        return;
                    }
                    var checked = 0, unchecked = 0,
                            total = items.length;
                    angular.forEach(items, function(item) {
                        checked   +=  ($scope.checkboxes.items[item.id]) || 0;
                        unchecked += (!$scope.checkboxes.items[item.id]) || 0;
                    });
                    if ((unchecked == 0) || (checked == 0)) {
                        $scope.checkboxes.checked = (checked == total);
                    }
                    // grayed checkbox
                    angular.element(document.getElementById("select_all")).prop("indeterminate", (checked != 0 && unchecked != 0));
        }, true);

            },
            backdrop: "static",
            size: "lg",
            resolve: {
                excl_id: function() {
                    return _.map($scope.model.items, function(item) { return item.good_id });
                }
            }
        });
        modalInstance.result.then(function (items) {
            items = _.map(items, function(item) {
                item.count = '';
                return item;
            });
            $scope.model.items = $scope.model.items.concat(items);
        }, function () {
        });
    };
});
/**
 * Created by user on 27.07.15.
 */

angular.module('pointsales.service', ['core.service'])

.factory('pointsalesgoods', function($http, BaseModelService){
//    var path = '';
    var child = Object.create(BaseModelService);
    var pointId;
    child.setPointId = function(id) {
        pointId = id;
    };

    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            return resp.data.items;
        });
    };

    child._getPath = function() {
        return "/api/pointsale/" + pointId + "/items";
    };
    return child;
})

.factory('pointsales', function($http, BaseModelService) {
    var path = '/api/pointsale';

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return path;
    };

    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            return resp.data.items;
        });
    };

    child.getCentralPoint = function() {
        return $http.get("/api/pointsale", {params: {is_central: true}}).then(function(resp) {
            var res = undefined;
            if (resp.data.count) {
                res = resp.data.items[0]
            }
            return res;
        });
    };

    child.getSlavePoint = function() {
        return $http.get("/api/pointsale", {params: {is_central: false}}).then(function(resp) {
            return resp.data.items;
        });
    };

    return child;
});
/**
 * Created by user on 30.07.15.
 */

angular.module('pointsales.module', ['ui.router', 'ui.bootstrap', 'core.service', 'core.controllers', 'pointsales.service', 'form'])

.run(function($templateCache, $http) {
    $templateCache.put("PointsaleForm", $http.get("/static/newadmin/js/applications/pointsale/template/form.html"));
})

.factory('PointService', function(BaseDictService, pointsales, $controller) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return pointsales.filter(text);
    };

    child.formInclude = function() {
        return "PointsaleForm";
    };

    child.title = function() {
        return "Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ ÑÐ¾ÑÐ³Ð¾Ð²Ð¾Ð¹ ÑÐ¾ÑÐºÐ¸";
    };

    child.titleEdit = function() {
        return "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ ÑÐ¾ÑÐ³Ð¾Ð²Ð¾Ð¹ ÑÐ¾ÑÐºÐ¸";
    };

    child.controller = function() {
        return function($scope, $modalInstance) {
            var parent = BaseDictService.controller();
            $controller(parent, {$scope: $scope, $modalInstance: $modalInstance});
        }
    };

    child.resolveEdit = function(item) {
        return {
            item: function() {
                return pointsales.getById(item.id);
            }
        };
    };

    return child;
})

.config(function($stateProvider) {
    $stateProvider.state('index.pointsale', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/pointsale'
        })
        .state('index.pointsale.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/pointsale/template/list.html",
                    controller: "PointsaleListCntr"
                }
            }
        })
        .state('index.pointsale.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/pointsale/template/create.html",
                    controller: "PointsaleCreateCntr"
                }
            }
        })
        .state('index.pointsale.view', {
            url: "/:id?tab&filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/pointsale/template/view.html",
                    controller: "PointsaleViewCntr"
                }
            },
            resolve: {
                item: function(pointsales, $stateParams) {
                    return pointsales.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.pointsale.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/pointsale/template/edit.html",
                    controller: "PointsaleEditCntr"
                }
            }
        })
})
.controller('PointsaleListCntr', function($scope, $controller, pointsales) {
    $controller('BaseListController', {$scope: $scope});

    $scope.goList = function() {
        return 'index.pointsale.list';
    };

    $scope.goView = function() {
        return 'index.pointsale.view';
    };

    $scope.goCreate = function() {
        return "index.pointsale.create";
    };

    $scope.getService = function() {
        return pointsales;
    };
})
.controller('PointsaleViewCntr', function($scope, $rootScope, $controller, $stateParams, $state, item, pointsales, pointsalesgoods) {

    var id = $stateParams.id;
    $scope.model = item;

    var $scopeGood = $rootScope.$new();

    $controller('GoodListCntr', {$scope: $scopeGood});

    $scopeGood.getService = function() {
        var serv  = pointsalesgoods;
        serv.setPointId(id);
        return serv;
    };

    $scopeGood.checkPage = function(page) {
        $state.go('index.pointsale.view', {filter: $scopeGood.searchText, page: page, tab: 1});
    };

    $scopeGood.filter = function() {
        $state.go('index.pointsale.view', {filter: $scopeGood.searchText, page: 1, tab: 1})
    };

    $scope.$scopeGood = $scopeGood;

    $scope.edit = function() {
        $state.go('index.pointsale.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            pointsales.delete_(id).then(function(){
                $state.go("index.pointsale.list");
            });
        }
    };
})
.controller("PointsaleCreateCntr", function($scope, $controller, pointsales) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.goList = function() {
        return "index.pointsale.list";
    };

    $scope.goView = function() {
        return "index.pointsale.view";
    };

    $scope.saveToServer = function() {
        return pointsales.create($scope.model);
    };
})

.controller("PointsaleEditCntr", function($scope, $controller, $stateParams, item, pointsales) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.model = item;

    $scope.saveToServer = function() {
        return pointsales.update(parseInt($stateParams.id), $scope.model);
    };

    $scope.goList = function() {
        return "index.pointsale.list";
    };

    $scope.goView = function() {
        return "index.pointsale.view";
    };
});
/**
 * Created by user on 14.08.15.
 */

angular.module('provider.service', ['core.service'])
.factory('providers', function(BaseModelService) {

    var url = '/api/provider',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };
    return child;
});

/**
 * Created by user on 14.08.15.
 */

angular.module('provider.module', ['core.controllers']).constant('ProviderConfig', {
    name: "ÐÐ¾ÑÑÐ°Ð²ÑÐ¸ÐºÐ¸",
    formname: "ProviderForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("ProviderForm", $http.get("/static/newadmin/js/applications/provider/template/form.html"));
})


.factory('ProviderService', function(BaseDictService, providers, $controller) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return providers.filter(text);
    };

    child.formInclude = function() {
        return "ProviderForm";
    };

    child.title = function() {
        return "Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð¿Ð¾ÑÑÐ°Ð²ÑÐ¸ÐºÐ°";
    };

    child.titleEdit = function() {
        return "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¿Ð¾ÑÑÐ°Ð²ÑÐ¸ÐºÐ°";
    };

    child.controller = function() {
        return function($scope, $modalInstance) {
            var parent = BaseDictService.controller();
            $controller(parent, {$scope: $scope, $modalInstance: $modalInstance});
        }
    };

    child.resolveEdit = function(item) {
        return {
            item: function() {
                return providers.getById(item.id);
            }
        };
    };

    return child;
})


.config(function($stateProvider) {
    $stateProvider.state('index.provider', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/provider'
        })
        .state('index.provider.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/provider/template/list.html",
                    controller: "ProviderListCntr"
                }
            }
        })
        .state('index.provider.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/provider/template/create.html",
                    controller: "ProviderCreateCntr"
                }
            }
        })
        .state('index.provider.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/provider/template/view.html",
                    controller: "ProviderViewCntr"
                }
            },
            resolve: {
                item: function(providers, $stateParams) {
                    return providers.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.provider.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/provider/template/edit.html",
                    controller: "ProviderEditCntr"
                }
            }
        })
})

.controller("ProviderListCntr", function($scope, $controller, ProviderConfig, providers) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = ProviderConfig.name;

    $scope.goCreate = function() {
        return "index.provider.create";
    };

    $scope.goView = function() {
        return "index.provider.view";
    };

    $scope.goList = function() {
        return "index.provider.list";
    };

    $scope.getService = function() {
        return providers;
    };
})

.controller("ProviderCreateCntr", function($scope, $controller, providers, ProviderConfig) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = ProviderConfig.name;

    $scope.formname =  ProviderConfig.formname;

    $scope.saveToServer = function() {
        return providers.create($scope.model);
    };

    $scope.goView = function() {
        return "index.provider.view";
    };
})

.controller("ProviderEditCntr", function($scope, $controller, item, providers, ProviderConfig) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.model = item;
    $scope.name_head = ProviderConfig.name;
    $scope.formname =  ProviderConfig.formname;

    $scope.saveToServer = function() {
        return providers.create($scope.model);
    };

    $scope.goView = function() {
        return "index.provider.view";
    };
})

.controller("ProviderViewCntr", function($scope, $stateParams, $state, providers, ProviderConfig, item) {
   $scope.name_head = ProviderConfig.name;

   var id = $stateParams.id;
    $scope.model = item;

    $scope.edit = function() {
        $state.go('index.provider.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            providers.delete_(id).then(function(){
                $state.go("index.provider.list");
            });
        }
    };
});
/**
 * Created by user on 14.08.15.
 */

angular.module('commodity.service', ['core.service'])
.factory('commodities', function(BaseModelService) {

    var url = '/api/commodity',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };
    return child;
});

/**
 * Created by user on 14.08.15.
 */

angular.module('commodity.module', ['core.controllers']).constant('CommodityConfig', {
    name: "ÐÐ¾Ð¼ÐµÐ½ÐºÐ»Ð°ÑÑÑÐ°",
    formname: "CommodityForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("CommodityForm", $http.get("/static/newadmin/js/applications/commodity/template/form.html"));
})


.factory('CommodityService', function(BaseDictService, commodities, $controller) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return commodities.filter(text);
    };

    child.formInclude = function() {
        return "CommodityForm";
    };

    child.title = function() {
        return "Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð½Ð¾Ð¼ÐµÐ½ÐºÐ»Ð°ÑÑÑÑ";
    };

    child.titleEdit = function() {
        return "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð½Ð¾Ð¼ÐµÐ½ÐºÐ»Ð°ÑÑÑÑ";
    };

    child.controller = function() {
        return function($scope, $modalInstance) {
            var parent = BaseDictService.controller();
            $controller(parent, {$scope: $scope, $modalInstance: $modalInstance});
        }
    };

    child.resolveEdit = function(item) {
        return {
            item: function() {
                return commodities.getById(item.id);
            }
        };
    };

    return child;
})


.config(function($stateProvider) {
    $stateProvider.state('index.commodity', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/commodity'
        })
        .state('index.commodity.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/commodity/template/list.html",
                    controller: "CommodityListCntr"
                }
            }
        })
        .state('index.commodity.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/commodity/template/create.html",
                    controller: "CommodityCreateCntr"
                }
            }
        })
        .state('index.commodity.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/commodity/template/view.html",
                    controller: "CommodityViewCntr"
                }
            },
            resolve: {
                item: function(commodities, $stateParams) {
                    return commodities.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.commodity.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/commodity/template/edit.html",
                    controller: "CommodityEditCntr"
                }
            }
        })
})

.controller("CommodityListCntr", function($scope, $controller, CommodityConfig, commodities) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = CommodityConfig.name;

    $scope.goCreate = function() {
        return "index.commodity.create";
    };

    $scope.goView = function() {
        return "index.commodity.view";
    };

    $scope.goList = function() {
        return "index.commodity.list";
    };

    $scope.getService = function() {
        return commodities;
    };
})

.controller("CommodityCreateCntr", function($scope, $controller, commodities, CommodityConfig) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = CommodityConfig.name;

    $scope.formname =  CommodityConfig.formname;

    $scope.saveToServer = function() {
        return commodities.create($scope.model);
    };

    $scope.goView = function() {
        return "index.commodity.view";
    };
})

.controller("CommodityEditCntr", function($scope, $controller, item, commodities, CommodityConfig) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.model = item;
    $scope.name_head = CommodityConfig.name;
    $scope.formname =  CommodityConfig.formname;

    $scope.saveToServer = function() {
        return commodities.create($scope.model);
    };

    $scope.goView = function() {
        return "index.commodity.view";
    };
})

.controller("CommodityViewCntr", function($scope, $stateParams, $state, commodities, CommodityConfig, item) {
   $scope.name_head = CommodityConfig.name;

   var id = $stateParams.id;
    $scope.model = item;

    $scope.edit = function() {
        $state.go('index.commodity.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            commodities.delete_(id).then(function(){
                $state.go("index.commodity.list");
            });
        }
    };
});
/**
 * Created by user on 14.08.15.
 */

angular.module('good.service', ['core.service'])
.factory('goods', function(BaseModelService, $http) {

    var url = '/api/good',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };

    child.printBarCode = function(good_id) {
        return $http.get("/api/good/" + good_id + "/printbarcode");
    };
    return child;
});

/**
 * Created by user on 17.08.15.
 */

angular.module('good.module', ['core.controllers']).constant('configGood', {
    name: "Ð¢Ð¾Ð²Ð°Ñ",
    formname: "GoodForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("GoodForm", $http.get("/static/newadmin/js/applications/good/template/form.html"));
})


.config(function($stateProvider) {
    $stateProvider.state('index.good', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/good'
        })
        .state('index.good.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/good/template/list.html",
                    controller: "GoodListCntr"
                }
            }
        })
        .state('index.good.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/good/template/create.html",
                    controller: "GoodCreateCntr"
                }
            }
        })
        .state('index.good.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/good/template/view.html",
                    controller: "GoodViewCntr"
                }
            },
            resolve: {
                item: function(goods, $stateParams) {
                    return goods.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.good.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/good/template/edit.html",
                    controller: "GoodEditCntr"
                }
            }
        })
})

.controller("GoodListCntr", function($scope, $controller, configGood, goods) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = configGood.name;

    $scope.goCreate = function() {
        return "index.good.create";
    };

    $scope.goView = function() {
        return "index.good.view";
    };

    $scope.goList = function() {
        return "index.good.list";
    };

    $scope.getService = function() {
        return goods;
    };
})

.controller("GoodCreateCntr", function($scope, $controller, goods, configGood, CommodityService) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = configGood.name;

    $scope.formname =  configGood.formname;
    $scope.CommodityService = CommodityService;

    $scope.saveToServer = function() {
        return goods.create($scope.model);
    };

    $scope.goView = function() {
        return "index.good.view";
    };
})

.controller("GoodEditCntr", function($scope, $controller, goods, item, configGood, CommodityService) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.model = item;
    $scope.name_head = configGood.name;
    $scope.formname =  configGood.formname;
    $scope.CommodityService = CommodityService;

    $scope.saveToServer = function() {
        return goods.update($scope.model.id, $scope.model);
    };

    $scope.goView = function() {
        return "index.good.view";
    };
})

.controller("GoodViewCntr", function($scope, $stateParams, $state, goods, configGood, item) {
    $scope.name_head = configGood.name;

    var id = $stateParams.id;
    $scope.model = item;
    $scope.printBarCode = printBarCode;

    $scope.edit = function() {
        $state.go('index.good.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            goods.delete_(id).then(function(){
                $state.go("index.good.list");
            });
        }
    };

    function printBarCode() {
        goods.printBarCode(id).then(function(resp) {
            var url = resp.data.link;
            window.open(url, "_target");
        }).catch(function(resp) {
            toastr.error(resp.data.message, "ÐÑÐ¸Ð±ÐºÐ°!", {"closeButton": true, "progressBar": true})
        });
    }

});
/**
 * Created by user on 14.08.15.
 */

angular.module('collects.service', ['core.service'])
.factory('collects', function(BaseModelService, $http) {

    var url = '/api/collect',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };

//    child.printBarCode = function(good_id) {
//        return $http.get("/api/good/" + good_id + "/printbarcode");
//    };
    return child;
});

/**
 * Created by user on 17.08.15.
 */

angular.module('collects.module', ['core.controllers']).constant('config', {
    name: "ÐÐ½ÐºÐ°ÑÑÐ°ÑÐ¸Ñ",
    formname: "CollectForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("CollectForm", $http.get("/static/newadmin/js/applications/collect/template/form.html"));
})


.config(function($stateProvider) {
    $stateProvider.state('index.collect', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/collect'
        })
        .state('index.collect.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/collect/template/list.html",
                    controller: "CollectListCntr"
                }
            }
        })
        .state('index.collect.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/collect/template/create.html",
                    controller: "CollectCreateCntr"
                }
            }
        })
        .state('index.collect.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/collect/template/view.html",
                    controller: "CollectViewCntr"
                }
            },
            resolve: {
                item: function(collects, $stateParams) {
                    return collects.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.collect.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/collect/template/edit.html",
                    controller: "CollectEditCntr"
                }
            }
        })
})

.controller("CollectListCntr", function($scope, $controller, config, collects) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = config.name;

    $scope.goCreate = function() {
        return "index.collect.create";
    };

    $scope.goView = function() {
        return "index.collect.view";
    };

    $scope.goList = function() {
        return "index.collect.list";
    };

    $scope.getService = function() {
        return collects;
    };
})

.controller("CollectCreateCntr", function($scope, $controller, collects, config, PointService, UserService) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = config.name;

    $scope.formname =  config.formname;
    $scope.PointService = PointService;
    $scope.UserService = UserService;

    $scope.datepickers = {
        dt: false
    };
    $scope.today = function() {
        $scope.model.date = new Date();
    };
    $scope.today();
    $scope.showWeeks = true;
    $scope.toggleWeeks = function () {
        $scope.showWeeks = ! $scope.showWeeks;
    };
    $scope.clear = function () {
        $scope.model.date = null;
    };
    $scope.toggleMin = function() {
        $scope.minDate = ( $scope.minDate ) ? null : new Date();
    };
    $scope.toggleMin();
    $scope.open = function($event) {
        if(!$scope.editForm) {
            $scope.status.opened = true;
        }
    };
    $scope.status = {
        opened: false
    };
    $scope.dateOptions = {
        'year-format': "'yy'",
        'starting-day': 1
    };

    $scope.saveToServer = function() {
        return collects.create($scope.model);
    };

    $scope.goView = function() {
        return "index.collect.view";
    };
})

.controller("CollectEditCntr", function($scope, $controller, collects, item, config, PointService, UserService) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.model = item;
    $scope.name_head = config.name;
    $scope.formname =  config.formname;
    $scope.PointService = PointService;
    $scope.UserService = UserService;

    $scope.datepickers = {
        dt: false
    };
    $scope.today = function() {
        $scope.model.date = new Date();
    };
//    $scope.today();
    $scope.showWeeks = true;
    $scope.toggleWeeks = function () {
        $scope.showWeeks = ! $scope.showWeeks;
    };
    $scope.clear = function () {
        $scope.model.date = null;
    };
    $scope.toggleMin = function() {
        $scope.minDate = ( $scope.minDate ) ? null : new Date();
    };
    $scope.toggleMin();
    $scope.open = function($event) {
        if(!$scope.editForm) {
            $scope.status.opened = true;
        }
    };
    $scope.status = {
        opened: false
    };
    $scope.dateOptions = {
        'year-format': "'yy'",
        'starting-day': 1
    };

    $scope.saveToServer = function() {
        return collects.update($scope.model.id, $scope.model);
    };

    $scope.goView = function() {
        return "index.collect.view";
    };
})

.controller("CollectViewCntr", function($scope, $stateParams, $state, collects, config, item) {
    $scope.name_head = config.name;

    var id = $stateParams.id;
    $scope.model = item;
//    $scope.printBarCode = printBarCode;

    $scope.edit = function() {
        $state.go('index.collect.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            deleteItem();
        }
    };

    function deleteItem() {
        collects.delete_(id).then(function(){
            $state.go("index.collect.list");
        });
    }

});
/**
 * Created by user on 24.08.15.
 */

angular.module('acceptance.service', ['core.service'])

.factory('AcceptanceService', function(BaseDictService, acceptances) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return acceptances.filter(text);
    };

    return child;
})


.factory('acceptancestatus', function($http) {
    return {
        doStatus: function(id, number) {
            return $http.post("/api/acceptance/" + id + "/status", {data: {status: number}});
        }
    }
})


.factory('acceptances', function(BaseModelService, $http) {
    var path = '/api/acceptance';

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return path;
    };

    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            return resp.data.items;
        });
    };

    child.getItems = function(id) {
        return $http.get("/api/acceptance/" + id + "/items").then(function(resp) {
            return resp.data.items;
        });
    };

//    child.getRowInvoiceIn = function(id) {
//        return $http.get("/api/invoiceprice2items/" + id).then(function(resp) {
//            return resp.data.items;
//        });
//    };

//    child.savePriceFromInvoice = function(id, items) {
//        return $http.post("/api/pricebulkinvoice", {data: {invoice_id: id, items: items}}).then(function(resp) {
//            return resp;
//        });
//    };

    return child;
});
angular.module('acceptance.module', ['core.controllers', 'acceptance.service']).constant('AcceptanceConfig', {
    name: "ÐÑÐ¸ÐµÐ¼ÐºÐ¸",
    formname: "AcceptanceForm"
})

.run(function($templateCache, $http) {
    $templateCache.put("AcceptanceForm", $http.get("/static/newadmin/js/applications/acceptance/template/form.html"));
})


.config(function($stateProvider) {
    $stateProvider.state('index.acceptance', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/acceptance'
        })

        .state('index.acceptance.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/acceptance/template/list.html",
                    controller: "AcceptanceListCntr"
                }
            }
        })

        .state('index.acceptance.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/acceptance/template/create.html",
                    controller: "AcceptanceCreateCntr"
                }
            },
            resolve: {
                topointsale: function (pointsales, $stateParams) {
                    if ($stateParams.to_pointsale_id) {
                        return pointsales.getByIds($stateParams.to_pointsale_id).then(function (resp) {
                            return resp.items;
                        });
                    } else {
                        return pointsales.getCentralPoint();
                    }
                }
            }
        })

        .state('index.acceptance.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/acceptance/template/view.html",
                    controller: "AcceptanceViewCntr"
                }
            },
            resolve: {
                item: function(acceptances, $stateParams) {
                    return acceptances.getById(parseInt($stateParams.id))
                },
                items: function(acceptances, $stateParams) {
                    return acceptances.getItems(parseInt($stateParams.id));
                }
            }
        })

        .state('index.acceptance.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/acceptance/template/edit.html",
                    controller: "AcceptanceEditCntr"
                }
            },
            resolve: {
                topointsale: function (pointsales, $stateParams) {
                    if ($stateParams.to_pointsale_id) {
                        return pointsales.getByIds($stateParams.to_pointsale_id).then(function (resp) {
                            return resp.items;
                        });
                    } else {
                        return pointsales.getCentralPoint();
                    }
                }
            }
        })
})

.controller("AcceptanceListCntr", function($scope, $controller, AcceptanceConfig, acceptances) {
    $controller('BaseListController', {$scope: $scope});
    $scope.name_head = AcceptanceConfig.name;

    $scope.goCreate = function() {
        return "index.acceptance.create";
    };

    $scope.goView = function() {
        return "index.acceptance.view";
    };

    $scope.goList = function() {
        return "index.acceptance.list";
    };

    $scope.getService = function() {
        return acceptances;
    };
})

.controller("AcceptanceCreateCntr", function($scope, $controller, acceptances, AcceptanceConfig, ConfigWidgets,
                                             PointService, ProviderService, InvoiceService, topointsale) {
    $controller('BaseCreateController', {$scope: $scope});
    $scope.name_head = AcceptanceConfig.name;

    $scope.model.type = 1;

    $scope.model.pointsale = topointsale;

    $scope.formname =  AcceptanceConfig.formname;

    $scope.config_datepicker = ConfigWidgets.defaultConfigDatepicker($scope.model.date);

    $scope.PointService = PointService;
    $scope.ProviderService = ProviderService;
    $scope.InvoiceService = InvoiceService;

    $scope.saveToServer = function() {
        return acceptances.create($scope.model);
    };

    $scope.goView = function() {
        return "index.acceptance.view";
    };

    $scope.goList = function() {
        return "index.acceptance.list";
    };
})

.controller("AcceptanceEditCntr", function($scope, $compile, $controller, $state, $q, goods, item,
                                           items, acceptances, AcceptanceConfig, topointsale) {
    $controller('AcceptanceCreateCntr', {$scope: $scope, topointsale: topointsale});

    $scope.name_head = AcceptanceConfig.name;
    $scope.formname =  AcceptanceConfig.formname;

    $scope.loadingFinish = true;

    $scope.item = angular.copy(item);
    $scope.model = $scope.item;
    $scope.model.items = angular.copy(items);

    $scope.tableEditEnabled = $scope.model.status == 2;
    $scope.formEditEnabled = !(!$scope.model.status || $scope.model.status == 1);

    $scope.clearDefault = function() {
        angular.forEach($scope.model.items, function(item) {
            item.fact_count = '';
        });
    };

    $scope.fTableEditEnabled = function() {
        return $scope.tableEditEnabled;
    };

    $scope.dynamicContent = tooltipDynamicContent;

    $scope.goView = function() {
        return "index.acceptance.view";
    };

    $scope._goCancel = function() {
        $state.go("index.acceptance.view", {mailId: $scope.item.id});
    };

    $scope.saveToServer = function() {
        return acceptances.update($scope.model.id, $scope.model);
    };

    function tooltipDynamicContent(id) {
        return function(event, api) {
            goods.getById(id).then(function(data) {

                var template = "<div>" +
                    "<h5>" +
                    "ÐÐ¾Ð»Ð½Ð¾Ðµ Ð½Ð°Ð¸Ð¼ÐµÐ½Ð¾Ð²Ð°Ð½Ð¸Ðµ: "+data.full_name +
                    "</h5>" +
                    "<h5>" +
                    "ÐÐ¾Ð¼ÐµÐ½ÐºÐ»Ð°ÑÑÑÐ°: <a ui-sref='index.commodity.view({id: "+data.commodity.id+"})'>"+data.commodity.name+"</a>" +
                    "</h5>" +
                    "<h6>Ð¦ÐµÐ½Ð° ÑÐ¾Ð·Ð½Ð¸ÑÑ: "+data['price.price_retail']+"</h6>" +
                    "</div>";

                var linkFn = $compile(template);
                var content = linkFn($scope);

                api.set('content.text', content);
            });
            return "Loading...";
        };
    }
})

.controller("AcceptanceViewCntr", function($scope, $stateParams, $state, acceptancestatus,
                                           AcceptanceConfig, invoices, item, items) {
    $scope.name_head = AcceptanceConfig.name;

    $scope.loadingFinish = true;

    var id = $stateParams.id;
    $scope.model = item;
    $scope.model.items = items;

    $scope.edit = function() {
        $scope.loadingFinish = false;
        $state.go('index.acceptance.view.edit', {id: id}).then(function() {
            $scope.loadingFinish = true;
        });

    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            invoices.delete_(id).then(function(){
                $state.go("index.acceptance.list");
            });
        }
    };

    $scope.toStatus = function(number) {
        if(number == 3) {
            if(confirm("ÐÑ Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÐµ Ð¿ÑÐ¸ÐµÐ¼ÐºÑ Ð² ÑÐ¸Ð½Ð°Ð»ÑÐ½ÑÐ¹ ÑÑÐ°ÑÑÑ (ÐºÐ¾Ð³Ð´Ð° ÑÐ¾Ð²Ð°Ñ ÑÐ¶Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½). " +
                "ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ! ÐÐ¿ÐµÑÐ°ÑÐ¸Ñ Ð½ÐµÐ¾Ð±ÑÐ°ÑÐ¸Ð¼Ð°Ñ.")){
                doIt();
            }
        } else {
            doIt();
        }

        function doIt(){
            $scope.loadingFinish = false;
            acceptancestatus.doStatus($scope.model.id, number).then(function() {
                $state.go('index.acceptance.view', {id: $scope.model.id}, {reload: 'index.acceptance.view'}).then(function() {
                    $scope.loadingFinish = true;
                });
            });
        }
    };
});
/**
 * Created by user on 28.07.15.
 */

angular.module('receivers.service', ['core.service'])
.factory('receivers', function(BaseModelService) {

    var url = '/api/receiver',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };
    return child;
});

/**
 * Created by user on 29.07.15.
 */

angular.module("receivers.module", ['ui.router', 'core.service', 'core.controllers', 'receivers.service', 'form'])
.run(function($templateCache, $http) {
    $templateCache.put("ReceiverForm", $http.get("/static/newadmin/js/applications/receiver/template/form.html"));
})

.factory('ReceiverService', function(BaseDictService, receivers) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return receivers.filter(text);
    };

    child.formInclude = function() {
        return "ReceiverForm";
    };

    child.title = function() {
        return "Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð¾Ð¿ÑÐ¾Ð²Ð¸ÐºÐ°";
    };

    child.titleEdit = function() {
        return "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¾Ð¿ÑÐ¾Ð²Ð¸ÐºÐ°";
    };

    child.resolveEdit = function(item) {
        return {
            item: function() {
                return receivers.getById(item.id);
            }
        };
    };

    return child;
})

.config(function($stateProvider) {
    $stateProvider.state('index.receiver', {
            data: {
                 roles: ['user']
            },
            abstract: true,
            url: '/receiver'
        })
        .state('index.receiver.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/receiver/template/list.html",
                    controller: "ReceiverListCntr"
                }
            }
        })
        .state('index.receiver.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/receiver/template/create.html",
                    controller: "ReceiverCreateCntr"
                }
            }
        })
        .state('index.receiver.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/receiver/template/view.html",
                    controller: "ReceiverViewCntr"
                }
            },
            resolve: {
                item: function(receivers, $stateParams) {
                    return receivers.getById(parseInt($stateParams.id))
                }
            }
        })
        .state('index.receiver.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/receiver/template/edit.html",
                    controller: "ReceiverEditCntr"
                }
            }
        })
});

AdminApp.controller('ReceiverListCntr', function($scope, receivers, $controller) {
    $controller('BaseListController', {$scope: $scope});

    $scope.goList = function() {
        return 'index.receiver.list';
    };

    $scope.goCreate = function() {
        return "index.receiver.create";
    };

    $scope.goView = function() {
        return 'index.receiver.view';
    };

    $scope.getService = function() {
        return receivers;
    };
})

.controller('ReceiverViewCntr', function($scope, $stateParams, $state, item, receivers) {
        var id = $stateParams.id;
    $scope.model = item;

    $scope.edit = function() {
        $state.go('index.receiver.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            receivers.delete_(id).then(function(){
                $state.go("index.receiver.list");
            });
        }
    };
})

.controller("ReceiverCreateCntr", function($scope, $controller, receivers) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.goList = function() {
        return "index.receiver.list";
    };

    $scope.goView = function() {
        return "index.receiver.view";
    };

    $scope.saveToServer = function() {
        return receivers.create($scope.model);
    };
})
.controller("ReceiverEditCntr", function($scope, $controller, $stateParams, item, receivers) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.model = item;

    $scope.saveToServer = function() {
        return receivers.update(parseInt($stateParams.id), $scope.model);
    };

    $scope.goList = function() {
        return "index.receiver.list";
    };

    $scope.goView = function() {
        return "index.receiver.view";
    };
});
/**
 * Created by user on 12.08.15.
 */

angular.module('users.service', ['core.service'])

.factory('RoleService', function(BaseDictService, $q, roles) {

    var child = Object.create(BaseDictService);
        var items;
    child.records = function (text) {
        return roles.filter(text);
    };

    return child;
})


.factory('roles', function(BaseModelService) {
        var url = '/api/role';

        var child = Object.create(BaseModelService);
        child._getPath = function () {
            return url;
        };
        child.filter = function(text, page, count) {
            return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
                return resp.data.items;
            });
        };
        return child;
    })

.factory('users', function(BaseModelService) {

    var url = '/api/user',
        items;

    var child = Object.create(BaseModelService);
    child._getPath = function () {
        return url;
    };
    child.filter = function(text, page, count) {
        return BaseModelService.filter.call(this, text, page, count).then(function(resp) {
            items = resp.data.items;
            return items;
        });
    };
    return child;
});

/**
 * Created by user on 12.08.15.
 */

/**
 * Created by user on 29.07.15.
 */

angular.module("users.module", ['ui.router', 'core.service', 'core.controllers', 'users.service', 'form'])
.run(function($templateCache, $http) {
    $templateCache.put("UserForm", $http.get("/static/newadmin/js/applications/user/template/form.html"));
})

.factory('UserService', function(BaseDictService, users, $controller) {

    var child = Object.create(BaseDictService);
    child.records = function (text) {
        return users.filter(text);
    };

    child.formInclude = function() {
        return "UserForm";
    };

    child.title = function() {
        return "Ð¡Ð¾Ð·Ð´Ð°Ð½Ð¸Ðµ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ";
    };

    child.titleEdit = function() {
        return "Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ";
    };

    child.controller = function() {
        return function($scope, $modalInstance) {
            var parent = BaseDictService.controller();
            $controller(parent, {$scope: $scope, $modalInstance: $modalInstance});
        }
    };

    child.resolveEdit = function(item) {
        return {
            item: function() {
                return users.getById(item.id);
            }
        };
    };

    return child;
})


.config(function($stateProvider) {
    $stateProvider.state('index.user', {
        abstract: true,
        url: '/user',
        data: {
            roles: ['admin']
        }
    })
        .state('index.user.list', {
            url: "?filter&page",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/user/template/list.html",
                    controller: "UserListCntr"
                }
            }
        })
        .state('index.user.create', {
            url: '/create',
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/user/template/create.html",
                    controller: "UserCreateCntr"
                }
            }
        })
        .state('index.user.view', {
            url: "/:id",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/user/template/view.html",
                    controller: "UserViewCntr"
                }
            },
            resolve: {
                item: function(users, $stateParams) {
                    return users.getById(parseInt($stateParams.id))
                },
                profile: function($http, $stateParams, $q) {
                    var q = $q.defer();
                    var name, iconUrl, position, is_superuser, id;
                    $http.get('/api/profile_by_id/' + $stateParams.id).then(function(resp) {
                        name = resp.data.name;
                        iconUrl = resp.data.iconUrl;
                        position = resp.data.position;
                        is_superuser = resp.data.is_superuser;
                        id = resp.data.id;

                        q.resolve({
                            name: name,
                            iconUrl: iconUrl,
                            position: position,
                            is_superuser: is_superuser,
                            id: id
                        })
                    }, function(resp) {
                        id: '';
                        name = '';
                        iconUrl = '';
                        position = '';
                        is_superuser = '';
                        q.resolve({
                            name: name,
                            iconUrl: iconUrl,
                            position: position,
                            is_superuser: is_superuser,
                            id: id
                        })
                    });





                    return q.promise;

                    //return
                }
            }
        })
        .state('index.user.view.edit', {
            url: "/edit",
            views: {
                'content@index': {
                    templateUrl: "/static/newadmin/js/applications/user/template/edit.html",
                    controller: "UserEditCntr"
                }
            }
        })
});

AdminApp.controller('UserListCntr', function($scope, users, $controller) {
    $controller('BaseListController', {$scope: $scope});

    $scope.goList = function() {
        return 'index.user.list';
    };

    $scope.goCreate = function() {
        return "index.user.create";
    };

    $scope.goView = function() {
        return 'index.user.view';
    };

    $scope.getService = function() {
        return users;
    };
})

.controller('UserViewCntr', function($scope, $stateParams, $state, item, users, profile) {
        var id = $stateParams.id;
    $scope.model = item;

    $scope.iconUrl = profile.iconUrl;

    $scope.edit = function() {
        $state.go('index.user.view.edit', {id: id});
    };

    $scope.delete_ = function() {
        if (confirm("ÐÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¾ÑÐ¸ÑÐµ ÑÐ´Ð°Ð»Ð¸ÑÑ Ð·Ð°Ð¿Ð¸ÑÑ?")) {
            users.delete_(id).then(function(){
                $state.go("index.user.list");
            });
        }
    };
})

.controller("UserCreateCntr", function($scope, $controller, users, RoleService) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.RoleService = RoleService;

    $scope.goList = function() {
        return "index.user.list";
    };

    $scope.goView = function() {
        return "index.user.view";
    };

    $scope.saveToServer = function() {
        return users.create($scope.model);
    };
})
.controller("UserEditCntr", function($scope, $controller, $stateParams, RoleService, item, users) {
    $controller('BaseCreateController', {$scope: $scope});

    $scope.RoleService = RoleService;

    $scope.model = item;

    $scope.saveToServer = function() {
        return users.update(parseInt($stateParams.id), $scope.model);
    };

    $scope.goList = function() {
        return "index.user.list";
    };

    $scope.goView = function() {
        return "index.user.view";
    };
});
/**
 * Created by Stanislav on 12.09.2015.
 */

angular.module("session.module", ['ui.router', 'core.service', 'core.controllers', 'good.service', 'session.service'])

.config(function($stateProvider) {
    $stateProvider.state('index.session', {
        data: {
             roles: ['vendor']
        },
        abstract: true,
        url: '/session',
        resolve: {
            isWork: function($state, $rootScope, $timeout, SessionService) {
                if ($rootScope.toState.name != 'index.session.menu' && !SessionService.isWork()) {
                    $timeout(function() {
                        $state.go('index.session.menu')
                    }, 0);
                }
            }
        }
    })

    .state('index.session.menu', {
        url: '/menu',
        views: {
            'content@index': {
                templateUrl: "/static/newadmin/js/applications/session/template/menu.html",
                controller: function($scope, $modal, SessionService) {

                    $modal.open({
                        templateUrl: "/static/newadmin/js/applications/session/template/menumodal.html",
                        controller: function($scope, $state, $modalInstance, principal) {
                            $scope.logout = function() {
                                principal.authenticate();
                                $state.go("signin").then(function() {
                                    $modalInstance.dismiss('cancel');
                                });
                            };

                            $scope.toDash = function() {
                                $state.go("index.dash").then(function() {
                                    $modalInstance.dismiss("cancel");
                                })
                            };

                            $scope.continueWorkday = function() {
                                SessionService.getOpenWorkDay().then(function(resp) {
                                    var workday = resp['res'];
                                    SessionService.setWork(workday.id);
                                    $state.go('index.session.view').then(function() {
                                        $modalInstance.dismiss('cancel');
                                    });
                                });
                            };

                            $scope.openWorkday = function() {
                                function open() {
                                    SessionService.beginWorkDay($scope.date, principal.getUser()).then(function() {

                                        $state.go('index.session.view').then(function() {
                                            $modalInstance.dismiss('cancel');
                                        });
                                    });
                                }
                                SessionService.hasOpenWorkDay().then(function(result) {
                                    if (result === true) {
                                        if(confirm("ÐÐ»Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾Ð±Ñ Ð¾ÑÐºÑÑÑÑ Ð½Ð¾Ð²ÑÐ¹ ÑÐ°Ð±Ð¾ÑÐ¸Ð¹ Ð´ÐµÐ½Ñ, ÑÐ»ÐµÐ´ÑÐµÑ Ð·Ð°ÐºÑÑÑÑ ÑÑÐ°ÑÑÐ¹.", "ÐÐ°ÐºÑÑÑÐ¸Ðµ ÑÑÐ°ÑÐ¾Ð³Ð¾ Ð´Ð½Ñ.")) {
                                            SessionService.endWorkDay().then(function() {
                                                open();
                                            });
                                        }
                                    } else {
                                        open();
                                    }
                                });

                            };
                            $scope.hasOpenWorkDay = false;
                            SessionService.hasOpenWorkDay().then(function(result) {
                                $scope.hasOpenWorkDay = result;
                            });

                            $scope.date = new Date();
                        },
                        backdrop: "static",
                        size: "lg"

                    });

                }
            }
        }
    })

    .state('index.session.view', {
        url: "?filter&page",
        views: {
            'content@index': {
                templateUrl: "/static/newadmin/js/applications/session/template/view.html",
                controller: function($scope, $state, $rootScope, $http, $window, $timeout, goods, hIDScanner, SessionService) {

                    $rootScope.$broadcast("toggleSidebar", {value: true});

                    $scope.itemsFixed = [];

                    $scope.cnt = -5;

                    $scope.model = {
                        count: 1
                    };
                    hIDScanner.initialize();

                    $scope.unfixedItem = undefined;

                    SessionService.getOpenWorkDay().then(function(resp) {
                        var day = resp['res'];
                        $scope.date = day.date_start;
                    });

                    SessionService.getAllItem(SessionService.getWork()).then(function(results) {
                        $scope.itemsFixed = results;
                    });

                    $scope.$on('$destroy', function() {
                        hIDScanner.uninitialize();
                    });

                    $scope.closeWorkDay = function() {
                        SessionService.endWorkDay().then(function() {
                            $state.go('index.session.menu');
                        });
                    };

                    $scope.sync = function() {
                        SessionService.syncSession();
                    };

                    var checkMap = {
                        1: "<span class='span-success'>ÐÑÐ¾Ð´Ð°Ð¶Ð°</span>",
                        2: "<span class='span-danger'>ÐÐ¾Ð·Ð²ÑÐ°Ñ</span>"
                    };

                    $scope.checkMap = checkMap;

                    $scope.addFix = function() {
                        setUnfixed({
                            barcode: '111111111111',
                            operation: $scope.checkModel,
                            checkModel: checkMap[$scope.checkModel],
                            datetime: new Date(),
                            is_sync: 0,
                            count: 1,
                            work_id: SessionService.getWork()
                        })
                    };

                    $rootScope.$on("hidScanner::scanned", function(event, barcode) {
                        var item = {
                            barcode: barcode.barcode,
                            operation: $scope.checkModel,
                            checkModel: checkMap[$scope.checkModel],
                            datetime: new Date(),
                            is_sync: 0,
                            count: 1,
                            work_id: SessionService.getWork()
                        };

                        setUnfixed(item);
                    });

                    $scope.clearUnfixed = clearUnfixed;
                    $scope.addToFixed = addToFixed;

                    $scope.checkModel = 1;

                    function addToFixed() {
                        if ($scope.unfixedItem) {
                            $scope.unfixedItem.count = $scope.model.count;
                            fixedItem($scope.unfixedItem).then(function() {
                                clearUnfixed();
                            });
                        }
                    }

                    function setUnfixed(item) {
                        $scope.unfixedItem = item;
                        $scope.cnt = -4;
                    }

                    function clearUnfixed() {
                        $scope.unfixedItem = undefined;
                        $scope.model.count = 1;
                        $scope.cnt = -5;
                    }

                    function fixedItem(item) {
                        return SessionService.insertItem(item).then(function(item) {
                            $scope.itemsFixed.push(item);
                        }).catch(function(err) {
                            console.error(err);
                        });
                    }
                }


            }
        }
    })}
);
/**
 * Created by user on 22.09.15.
 */

angular.module("session.service", ['indexedDB'])

.factory("SessionService", function($indexedDB, $http, $q, $window) {
    var OBJECT_STORE_NAME = 'session_items';
    var OBJECT_WD_NAME = "workdays";
    var TOKEN_DAY = "WORK_DAY";
    return {

        beginWorkDay: function(date, username) {
            var self = this;
            var q = $q.defer();
            $indexedDB.openStore(OBJECT_WD_NAME, function(store) {
                var wd = {
                    date_start: date,
                    date_end: '',
                    is_sync: 0,
                    username: username
                };
                store.insert(wd).then(function(id) {
                    self.setWork(id[0]);
                    q.resolve();
                });
            });

            return q.promise;
        },

        getOpenWorkDay: function() {
            var q = $q.defer();
            $indexedDB.openStore(OBJECT_WD_NAME, function(store) {
                store.findBy('date_end_idx', '').then(function(res) {
                    q.resolve({res: res, store: store});
                });
            });

            return q.promise;
        },

        hasOpenWorkDay: function() {
            var q = $q.defer();

            this.getOpenWorkDay().then(function(resp) {
                if (angular.isUndefined(resp['res'])) {
                    q.resolve(false);
                } else {
                    q.resolve(true);
                }
            });

            return q.promise;
        },

        endWorkDay: function() {
            var q = $q.defer();
            var self = this;
            self.getOpenWorkDay().then(function(resp) {
                var workday = resp['res'];
                var store = resp['store'];
                workday.date_end = new Date();

                store.upsert(workday);
                self.deleteWork();
                q.resolve();
            });

            return q.promise;
        },

        getWork: function() {
            return parseInt($window.localStorage[TOKEN_DAY]);
        },

        setWork: function(id) {
            $window.localStorage[TOKEN_DAY] = id;
        },

        deleteWork: function() {
            delete $window.localStorage[TOKEN_DAY];
        },

        isWork: function(){

            if ($window.localStorage[TOKEN_DAY]) {
                return true;
            }
            return false;
        },

        getDataToSync: function() {
            //ÐÑÐ±Ð¸ÑÐ°ÐµÐ¼ ÑÐµ workday Ñ ÐºÐ¾ÑÐ¾ÑÑÑ is_sync ÑÐ°Ð²ÐµÐ½ 0.
            //ÐÐ°Ð»ÐµÐµ Ð²ÑÐ±Ð¸ÑÐ°ÐµÐ¼ ÑÐ²ÑÐ·Ð°Ð½Ð½ÑÐµ session_items Ñ ÐºÐ¾ÑÐ¾ÑÑÑ work_id ÑÐ°Ð²ÐµÐ½ Ð²ÑÐ±ÑÐ°Ð½Ð½ÑÐ¼ workdays.
            var result = [];
            var queue_q = [];
            var q = $q.defer();
            $indexedDB.openStore(OBJECT_WD_NAME, function(store) {
                store.eachBy('is_sync_idx', {beginKey: 0, endKey: 0}).then(function(workday_items) {

                    for (var j = 0; j < workday_items.length; j++) {
                        var work = workday_items[j];

                        (function(w) {
                            var q_sub = $q.defer();
                            queue_q.push(q_sub.promise);
                            $indexedDB.openStore(OBJECT_STORE_NAME, function(store) {
                                w['items'] = [];
                                result.push(w);
                                var query = store.query().$index('my_cool_idx').$eq([0, w.id]);
                                (function(defer, query_in, work) {
                                    store.eachWhere(query_in).then(function(items) {
                                        work['items'] = items;
                                        defer.resolve();
                                    });
                                })(q_sub, query, w);

                            });

                        })(work);
                    }

                    $q.all(queue_q).then(function() {
                        q.resolve(result);
                    });
                });
            });

            return q.promise;
        },

        saveSyncData: function(result) {
            var q = $q.defer();
            var queue_q = [];
            for (var i = 0; i < result.length; i++) {
                item = result[i];

                var q_s = $q.defer();
                queue_q.push(q_s.promise);

                (function(q, itm) {
                    $indexedDB.openStores([OBJECT_WD_NAME, OBJECT_STORE_NAME], function(storeWD, storeItems) {

                        var items = _.map(itm['items'], function(item) {
                            item.is_sync = 1;
                            return item;
                        });

                        storeItems.upsert(items).then(function () {
                            if(itm.date_end) {
                                itm.is_sync = 1;
                                storeWD.upsert(itm);
                            }
                            q.resolve();
                        });
                    });
                })(q_s, item);
            }

            $q.all(queue_q).then(function() {
                q.resolve();
            });

            return q.promise;
        },

        syncSession: function() {
            var self = this;
            var q = $q.defer();
            //Ð¡Ð¸Ð½ÑÑÐ¾Ð½Ð¸Ð·Ð¸ÑÑÐµÐ¼ Ð·Ð°Ð¿Ð¸ÑÐ¸ workday Ð¸ session_items
            //ÐÑÐ±Ð¸ÑÐ°ÐµÐ¼ Ð´Ð°Ð½Ð½ÑÐµ Ð´Ð»Ñ ÑÐ¸Ð½ÑÑÐ¾Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸
            //ÐÐ¾ÑÐ»Ðµ ÑÑÐ¿ÐµÑÐ½Ð¾Ð¹ ÑÐ¸Ð½ÑÑÐ¾Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸, Ð²ÑÑÑÐ°Ð²Ð»ÑÐµÐ¼ ÑÐ»Ð°Ð³ is_sync Ñ ÑÐµÑ workdays Ñ ÐºÐ¾ÑÐ¾ÑÑÑ date_end Ð½Ðµ Ð¿ÑÑÑÐ¾Ð¹.
            this.getDataToSync().then(function(result) {
                console.log("Data to sync", result);

                $http.post('/api/syncSession', {data: {items: result}}).then(function(resp) {

                    self.saveSyncData(result).then(function() {
                        q.resolve();
                    });

                }).catch(function(resp) {
                    q.reject();
                });
            });

            return q.promise;
        },
        insertItem: function(item) {
            var q = $q.defer();
            $indexedDB.openStore(OBJECT_STORE_NAME, function(store) {
                store.insert(item).then(function(res) {
                    q.resolve(item);
                }).catch(function(er) {
                    q.reject(er);
                });
            });
            return q.promise;
        },
        getAllItem: function(work_id) {
            var q = $q.defer();
            var OBJECT_STORE_NAME = 'session_items';
            $indexedDB.openStore(OBJECT_STORE_NAME, function(store) {
                store.eachBy('work_id_idx', {beginKey: work_id, endKey: work_id}).then(function(results) {
                    q.resolve(results);
                });
            });

            return q.promise;
        }
    }
});
/**
 * Created by user on 24.08.15.
 */

angular.module("utils", [])
.factory("arrayhelp", function() {
    return {
        getElemsByIds: function(items_ids, items) {
            return _.map(items_ids,
                function(it) {
                    var index = _.findIndex(items, function(item) {return item.id == it});
                    return items[index];
                }
            );
        }
    }
});
angular.module('application', [])

.factory("Application", function() {
    return {
        version: function() {
            return "1.0";
        },
        authorLink: function() {
            return "<a target='_blank' href='http://evfam.com'>Evseev Stanislav</a>.";
        }
    }
});
angular.module('user', [])

.service("User", function($q, $http) {
    var name = "", iconUrl = "", position = "", is_superuser = false, id = '';

    return {
        id: function() {
            return id;
        },
        name: function() {
            return name;
        },
        iconUrl: function() {
            return iconUrl;
        },
        position: function() {
            return position;
        },
        is_superuser: function() {
            return is_superuser;
        },
        fetch: function() {
            return $http.get('/api/profile').then(function(resp) {
                name = resp.data.name;
                iconUrl = resp.data.iconUrl;
                position = resp.data.position;
                is_superuser = resp.data.is_superuser;
                id = resp.data.id;
            }, function(resp) {
                id: '';
                name = '';
                iconUrl = '';
                position = '';
                is_superuser = '';
            });
        }
    }
})

.factory("Company", function () {
    return {
        nameInvoice: function() {
            return "ÐÐ ÐÐ²ÑÐµÐµÐ²Ð°";
        },
        name: function() {
            return "<b>ÐÐ°Ð·ÐµÑÑ </b>ÐÐ£Ð ÐÐÐÐ«";
        },
        nameShort: function() {
            return "<b>Ð</b>Ð";
        }
    }
});
/**
 * Created by user on 27.07.15.
 */

angular.module("auth.http", ["core.helpers"])

.config(function($httpProvider) {
    $httpProvider.interceptors.push('authInterceptor');
})

.factory('authInterceptor', function($rootScope, $q, $injector, $window, Base64, Device) {
    function statusBr(status) {
        /*
        * Ð£Ð²ÐµÐ´Ð¾Ð¼Ð»ÑÐµÐ¼ ÑÐ¸ÑÑÐµÐ¼Ñ, Ð¾ ÑÐ¼ÐµÐ½Ðµ ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ð¹(online/offline).
        * */
        $rootScope.$broadcast('online', {status: status});
    }
    return {
        // Add authorization token to headers
        request: function (config) {
            var principal = $injector.get("principal");
            config.headers = config.headers || {};
            if (principal.isAuthenticated()) {
                config.headers.Authorization = 'Basic ' + Base64.encode(principal.getToken() + ':' + 'unused');
            }
            config.headers.DeviceId = Device.getIfDefined();
            return config;
        },

        response: function(response) {
            statusBr(true);
            return response;
        },

        // Intercept 401s and redirect you to login
        responseError: function(response) {
            if(response.status === 401) {
                statusBr(true);
                var $state = $injector.get("$state");
                var principal = $injector.get("principal");
                principal.authenticate(null);
                $state.go('signin');
                return $q.reject(response);
            }
            else if (response.status === 403) {
                statusBr(true);
                var $state = $injector.get("$state");
                $state.go('index.accessdenied');
                return $q.reject(response);
            }

            else if (response.status == 0) {
                statusBr(false);
                return $q.reject(response);
            }
            else {
                statusBr(true);
                return $q.reject(response);
            }


        }
    };
});
/**
 * Created by user on 27.07.15.
 */
angular.module('auth.ui', ['ui.router', 'indexedDB'])

.factory('principal', ['$q', '$http', '$timeout', '$window', '$indexedDB',
    function($q, $http, $timeout, $window, $indexedDB) {
        var _identity = undefined, _authenticated = false;

        return {
            isIdentityResolved: function() {
                return angular.isDefined(this.getIdentity());
            },
            isInRole: function(role) {
                var _identity = this.getIdentity();
                var _authenticated = this.isAuthenticated();
                if (!_authenticated || !_identity) return false;
                return _identity.indexOf(role) != -1;
            },
            isInAnyRole: function(roles) {
                var _identity = this.getIdentity();
                var _authenticated = this.isAuthenticated();
                if (!_authenticated || !_identity) return false;

                for (var i = 0; i < roles.length; i++) {
                    if (this.isInRole(roles[i])) return true;
                }

                return false;
            },

            permissionRoles: function(roles) {
                if (roles && roles.length > 0 && !this.isInAnyRole(roles)) {
                    return false;
                }
                return true;
            },

            isAuthenticated: function() {
                return angular.isDefined(this.getToken());
            },

            getIdentity: function() {
                if ($window.localStorage.identity) {
                    return JSON.parse($window.localStorage.identity);
                }
            },

            setIdentity: function(identity) {
                $window.localStorage.identity = JSON.stringify(identity);
            },

            deleteIdentity: function() {
                delete $window.localStorage.identity;
            },

            getToken: function() {
                return $window.localStorage.token;
            },
            setToken: function(token) {
                $window.localStorage.token = token;
            },
            setUser: function(name) {
                $window.localStorage.username = name;
            },
            getUser: function() {
                return $window.localStorage.username;
            },
            deleteUser: function() {
                delete $window.localStorage.username;
            },
            deleteToken: function() {
                delete $window.localStorage.token;
            },

            authenticate: function(identity) {
                var self = this;
                var q;

                if (identity) {
                    var user = {
                        name: identity.login,
                        password: identity.password
                    };
                    q = $q.defer();

                    $http.post("/api/auth", {user: user.name, password: user.password}).then(successAuth, failureAuth);

                    return q.promise;
                } else {
                    self.deleteToken();
                    self.deleteIdentity();
                }

                function successAuth(resp) {
                    console.info("Success Auth.");
                    var user = {
                        name: identity.login,
                        password: identity.password,
                        token: resp.data.token
                    };
                    var q2 = $q.defer();

                    $indexedDB.openStore('users', function(store) {

                        store.findBy('name_idx', user.name).then(function(usr) {
                            console.info("Get user after success auth. " + usr);

                            if (angular.isUndefined(usr)) {
                                store.insert(user);
                            } else {
                                usr.token = resp.data.token;
                                usr.password = user.password;
                                store.upsert(usr);
                            }

                            q2.resolve();

                        });
                    });

                    q2.promise.then(function() {
                        self.setUser(user.name);
                        self.setToken(resp.data.token);
                        self.identity().then(function() {
                            q.resolve();
                        });
                    });
                }

                function failureAuth(resp) {
                    console.info("Failure Auth.");
                    if (resp.status == 0) {
                        $indexedDB.openStore('users', function(store) {
                            store.findBy('name_idx', user.name).then(function(usr) {
                                if (angular.isUndefined(usr) || usr.password != user.password) {
                                    self.deleteToken();
                                    self.deleteUser();
                                    q.reject("Ð Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð¹ Ð±Ð°Ð·Ðµ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ " + user.name);
                                } else {
                                    self.setToken(usr.token);
                                    self.setUser(user.name);
                                    self.identity().then(function() {
                                        q.resolve();
                                    });

                                }
                            });
                        });
                    } else {
                        self.deleteToken();
                        self.deleteUser();
                        q.reject(resp.data.message);
                    }
                }
            },
            identity: function(force) {
                var self = this;
                var deferred = $q.defer();
                var _identity = this.getIdentity();

                if (force === true) _identity = undefined;


                // check and see if we have retrieved the identity data from the server. if we have, reuse it by immediately resolving
                if (angular.isDefined(_identity)) {
                    deferred.resolve(_identity);

                    return deferred.promise;
                }

                //ÐÑÑÐ°ÐµÐ¼ÑÑ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ identity Ð¾Ð½Ð»Ð°Ð¹Ð½, ÐµÑÐ»Ð¸ Ð¾ÑÑÑÑÑÑÐ²ÑÐµÑ ÑÐµÑÑ - Ð±ÐµÑÐµÐ¼ Ð¸Ð· Ð»Ð¾ÐºÐ°Ð»ÑÐ½Ð¾Ð¹ Ð±Ð°Ð·Ñ
                //
                $http.get("/api/identity").success(function(data){

                    var q = $q.defer();

                    $indexedDB.openStore('users', function(store) {
                        store.findBy('name_idx', self.getUser()).then(function(usr) {
                            usr.identity = data.identity;
                            store.upsert(usr);
                            q.resolve(data.identity);
                        });
                    });

                    q.promise.then(function(identity) {
                        self.setIdentity(identity);
                        deferred.resolve(self.getIdentity());
                    });

                }).error(function(resp) {

                    function Fail() {
                        self.deleteIdentity();
                        self.deleteToken();
                        deferred.resolve(undefined);
                    }

                    if (resp == null && self.getUser()) {

                        $indexedDB.openStore('users', function(store) {
                            store.findBy('name_idx', self.getUser()).then(function(usr) {
                                if (!angular.isUndefined(usr)) {
                                    self.setIdentity(usr.identity);
                                    deferred.resolve(self.getIdentity());
                                } else {
                                    Fail();
                                }
                            });
                        });

                    } else {
                        Fail();
                    }
                });

                return deferred.promise;
            }
        };
    }
])

.factory('authorization', ['$rootScope', '$state', 'principal',
    function($rootScope, $state, principal) {
        return {
            authorize: function() {
                return principal.identity().then(function() {
                    var isAuthenticated = principal.isAuthenticated();

                    if ($rootScope.toState.name != "signin" && $rootScope.toState.name != "register" &&
                        $rootScope.toState.data &&
                        $rootScope.toState.data.roles && $rootScope.toState.data.roles.length > 0 &&
                        !principal.isInAnyRole($rootScope.toState.data.roles)) {
                        if (isAuthenticated)
                            $state.go('index.accessdenied'); // user is signed in but not authorized for desired state
                        else {
                            // user is not authenticated. stow the state they wanted before you
                            // send them to the signin state, so you can return them when you're done
                            $rootScope.returnToState = $rootScope.toState;
                            $rootScope.returnToStateParams = $rootScope.toStateParams;

                            // now, send them to the signin state so they can log in
                            $state.go('signin');
                        }
                    }
                });
            }
        };
    }
])

.run(['$rootScope', '$state', '$stateParams', 'authorization', 'principal', '$timeout',
    function($rootScope, $state, $stateParams, authorization, principal, $timeout) {

        $rootScope.$on('$stateChangeStart', function(event, toState, toStateParams) {
            // track the state the user wants to go to; authorization service needs this
            $('.qtip').qtip('hide');

            $rootScope.toState = toState;
            $rootScope.toStateParams = toStateParams;
            // if the principal is resolved, do an authorization check immediately. otherwise,
            // it'll be done when the state it resolved.
            if ($rootScope.toState.name != "signin" && $rootScope.toState.name != "register") {
                if (!principal.isAuthenticated()) {

                    if ($state.current.name == 'register' || $state.current.name == "signin") {
                        event.preventDefault();
                    }

                    if (!$rootScope.$$phase) {
                        $rootScope.$apply(function() {
                            $state.go('signin');
                        });
                    } else {
                        $timeout(function() {
                            $rootScope.$apply(function() {
                                $state.go('signin');
                            });
                        }, 0)
                    }

                }
                if (principal.isIdentityResolved()) {
                      authorization.authorize();
                }
            }

        });
    }
]);





/**
 @license $indexedDBProvider
 (c) 2014 Bram Whillock (bramski)
 Forked from original work by clements Capitan (webcss)
 License: MIT
 */

(function() {
  'use strict';
  var __slice = [].slice;

  angular.module('indexedDB', []).provider('$indexedDB', function() {
    var IDBKeyRange, allTransactions, apiDirection, appendResultsToPromise, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, indexedDB, readyState, upgradesByVersion;
    indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;
    dbMode = {
      readonly: "readonly",
      readwrite: "readwrite"
    };
    readyState = {
      pending: "pending"
    };
    cursorDirection = {
      next: "next",
      nextunique: "nextunique",
      prev: "prev",
      prevunique: "prevunique"
    };
    apiDirection = {
      ascending: cursorDirection.next,
      descending: cursorDirection.prev
    };
    dbName = '';
    dbVersion = 1;
    db = null;
    upgradesByVersion = {};
    dbPromise = null;
    allTransactions = [];
    defaultQueryOptions = {
      useIndex: void 0,
      keyRange: null,
      direction: cursorDirection.next
    };
    applyNeededUpgrades = function(oldVersion, event, db, tx, $log) {
      var version;
      for (version in upgradesByVersion) {
        if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {
          continue;
        }
        $log.log("$indexedDB: Running upgrade : " + version + " from " + oldVersion);
        upgradesByVersion[version](event, db, tx);
      }
    };
    errorMessageFor = function(e) {
      if (e.target.readyState === readyState.pending) {
        return "Error: Operation pending";
      } else {
        return e.target.webkitErrorMessage || e.target.error.message || e.target.errorCode;
      }
    };
    appendResultsToPromise = function(promise, results) {
      if (results !== void 0) {
        return promise.then(function() {
          return results;
        });
      } else {
        return promise;
      }
    };

    /**
    @ngdoc function
    @name $indexedDBProvider.connection
    @function
    
    @description
    sets the name of the database to use
    
    @param {string} databaseName database name.
    @returns {object} this
     */
    this.connection = function(databaseName) {
      dbName = databaseName;
      return this;
    };

    /**
    @ngdoc function
    @name $indexedDBProvider.upgradeDatabase
    @function
    
    @description provides version number and steps to upgrade the database wrapped in a
    callback function
    
    @param {number} newVersion new version number for the database.
    @param {function} callback the callback which proceeds the upgrade
    @returns {object} this
     */
    this.upgradeDatabase = function(newVersion, callback) {
      upgradesByVersion[newVersion] = callback;
      dbVersion = Math.max.apply(null, Object.keys(upgradesByVersion));
      return this;
    };
    this.$get = [
      '$q', '$rootScope', '$log', function($q, $rootScope, $log) {
        var DbQ, ObjectStore, Query, Transaction, addTransaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;
        rejectWithError = function(deferred) {
          return function(error) {
            return $rootScope.$apply(function() {
              return deferred.reject(errorMessageFor(error));
            });
          };
        };
        createDatabaseConnection = function() {
          var dbReq, deferred;
          deferred = $q.defer();
          dbReq = indexedDB.open(dbName, dbVersion || 1);
          dbReq.onsuccess = function() {
            db = dbReq.result;
            $rootScope.$apply(function() {
              deferred.resolve(db);
            });
          };
          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);
          dbReq.onupgradeneeded = function(event) {
            var tx;
            db = event.target.result;
            tx = event.target.transaction;
            $log.log("$indexedDB: Upgrading database '" + db.name + "' from version " + event.oldVersion + " to version " + event.newVersion + " ...");
            applyNeededUpgrades(event.oldVersion, event, db, tx, $log);
          };
          return deferred.promise;
        };
        openDatabase = function() {
          return dbPromise || (dbPromise = createDatabaseConnection());
        };
        closeDatabase = function() {
          return openDatabase().then(function() {
            db.close();
            db = null;
            return dbPromise = null;
          });
        };
        validateStoreNames = function(storeNames) {
          var found, storeName, _i, _len;
          found = true;
          for (_i = 0, _len = storeNames.length; _i < _len; _i++) {
            storeName = storeNames[_i];
            found = found & db.objectStoreNames.contains(storeName);
          }
          return found;
        };
        openTransaction = function(storeNames, mode) {
          if (mode == null) {
            mode = dbMode.readonly;
          }
          return openDatabase().then(function() {
            if (!validateStoreNames(storeNames)) {
              return $q.reject("Object stores " + storeNames + " do not exist.");
            }
            return new Transaction(storeNames, mode);
          });
        };
        keyRangeForOptions = function(options) {
          if (!angular.isUndefined(options.beginKey) && !angular.isUndefined(options.endKey)) {
            return IDBKeyRange.bound(options.beginKey, options.endKey);
          }
        };
        addTransaction = function(transaction) {
          allTransactions.push(transaction.promise);
          return transaction.promise["finally"](function() {
            var index;
            index = allTransactions.indexOf(transaction.promise);
            if (index > -1) {
              return allTransactions.splice(index, 1);
            }
          });
        };
        Transaction = (function() {
          function Transaction(storeNames, mode) {
            if (mode == null) {
              mode = dbMode.readonly;
            }
            this.transaction = db.transaction(storeNames, mode);
            this.defer = $q.defer();
            this.promise = this.defer.promise;
            this.setupCallbacks();
          }

          Transaction.prototype.setupCallbacks = function() {
            this.transaction.oncomplete = (function(_this) {
              return function() {
                return $rootScope.$apply(function() {
                  return _this.defer.resolve("Transaction Completed");
                });
              };
            })(this);
            this.transaction.onabort = (function(_this) {
              return function(error) {
                return $rootScope.$apply(function() {
                  return _this.defer.reject("Transaction Aborted", error);
                });
              };
            })(this);
            this.transaction.onerror = (function(_this) {
              return function(error) {
                return $rootScope.$apply(function() {
                  return _this.defer.reject("Transaction Error", error);
                });
              };
            })(this);
            return addTransaction(this);
          };

          Transaction.prototype.objectStore = function(storeName) {
            return this.transaction.objectStore(storeName);
          };

          Transaction.prototype.abort = function() {
            return this.transaction.abort();
          };

          return Transaction;

        })();
        DbQ = (function() {
          function DbQ() {
            this.q = $q.defer();
            this.promise = this.q.promise;
          }

          DbQ.prototype.reject = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return $rootScope.$apply((function(_this) {
              return function() {
                var _ref;
                return (_ref = _this.q).reject.apply(_ref, args);
              };
            })(this));
          };

          DbQ.prototype.rejectWith = function(req) {
            return req.onerror = req.onblocked = (function(_this) {
              return function(e) {
                return _this.reject(errorMessageFor(e));
              };
            })(this);
          };

          DbQ.prototype.resolve = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return $rootScope.$apply((function(_this) {
              return function() {
                var _ref;
                return (_ref = _this.q).resolve.apply(_ref, args);
              };
            })(this));
          };

          DbQ.prototype.notify = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return $rootScope.$apply((function(_this) {
              return function() {
                var _ref;
                return (_ref = _this.q).notify.apply(_ref, args);
              };
            })(this));
          };

          DbQ.prototype.dbErrorFunction = function() {
            return (function(_this) {
              return function(error) {
                return $rootScope.$apply(function() {
                  return _this.q.reject(errorMessageFor(error));
                });
              };
            })(this);
          };

          DbQ.prototype.resolveWith = function(req) {
            this.rejectWith(req);
            return req.onsuccess = (function(_this) {
              return function(e) {
                return _this.resolve(e.target.result);
              };
            })(this);
          };

          return DbQ;

        })();
        ObjectStore = (function() {
          function ObjectStore(storeName, transaction) {
            this.storeName = storeName;
            this.store = transaction.objectStore(storeName);
            this.transaction = transaction;
          }

          ObjectStore.prototype.defer = function() {
            return new DbQ();
          };

          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {
            var results;
            if (req == null) {
              req = this.store.openCursor();
            }
            results = [];
            defer.rejectWith(req);
            return req.onsuccess = function(e) {
              var cursor;
              if (cursor = e.target.result) {
                results.push(mapFunc(cursor));
                defer.notify(mapFunc(cursor));
                return cursor["continue"]();
              } else {
                return defer.resolve(results);
              }
            };
          };

          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {
            var defer, item, req, results, _i, _len;
            defer = this.defer();
            if (!angular.isArray(data)) {
              data = [data];
            }
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              req = mapFunc(item);
              results = [];
              defer.rejectWith(req);
              req.onsuccess = function(e) {
                results.push(e.target.result);
                defer.notify(e.target.result);
                if (results.length >= data.length) {
                  return defer.resolve(results);
                }
              };
            }
            if (data.length === 0) {
              return $q.when([]);
            }
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.getAllKeys
            @function
          
            @description
            gets all the keys
          
            @returns {Q} A promise which will result with all the keys
           */

          ObjectStore.prototype.getAllKeys = function() {
            var defer, req;
            defer = this.defer();
            if (this.store.getAllKeys) {
              req = this.store.getAllKeys();
              defer.resolveWith(req);
            } else {
              this._mapCursor(defer, function(cursor) {
                return cursor.key;
              });
            }
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.clear
            @function
          
            @description
            clears all objects from this store
          
            @returns {Q} A promise that this can be done successfully.
           */

          ObjectStore.prototype.clear = function() {
            var defer, req;
            defer = this.defer();
            req = this.store.clear();
            defer.resolveWith(req);
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.delete
            @function
          
            @description
            Deletes the item at the key.  The operation is ignored if the item does not exist.
          
            @param {key} The key of the object to delete.
            @returns {Q} A promise that this can be done successfully.
           */

          ObjectStore.prototype["delete"] = function(key) {
            var defer;
            defer = this.defer();
            defer.resolveWith(this.store["delete"](key));
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.upsert
            @function
          
            @description
            Updates the given item
          
            @param {data} Details of the item or items to update or insert
            @returns {Q} A promise that this can be done successfully.
           */

          ObjectStore.prototype.upsert = function(data) {
            return this._arrayOperation(data, (function(_this) {
              return function(item) {
                return _this.store.put(item);
              };
            })(this));
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.insert
            @function
          
            @description
            Updates the given item
          
            @param {data} Details of the item or items to insert
            @returns {Q} A promise that this can be done successfully.
           */

          ObjectStore.prototype.insert = function(data) {
            return this._arrayOperation(data, (function(_this) {
              return function(item) {
                return _this.store.add(item);
              };
            })(this));
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.getAll
            @function
          
            @description
            Fetches all items from the store
          
            @returns {Q} A promise which resolves with copies of all items in the store
           */

          ObjectStore.prototype.getAll = function() {
            var defer;
            defer = this.defer();
            if (this.store.getAll) {
              defer.resolveWith(this.store.getAll());
            } else {
              this._mapCursor(defer, function(cursor) {
                return cursor.value;
              });
            }
            return defer.promise;
          };

          ObjectStore.prototype.eachWhere = function(query) {
            var defer, direction, indexName, keyRange, req;
            defer = this.defer();
            indexName = query.indexName;
            keyRange = query.keyRange;
            direction = query.direction;
            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);
            this._mapCursor(defer, (function(cursor) {
              return cursor.value;
            }), req);
            return defer.promise;
          };

          ObjectStore.prototype.findWhere = function(query) {
            return this.eachWhere(query);
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.each
            @function
          
            @description
            Iterates through the items in the store
          
            @param {options.beginKey} the key to start iterating from
            @param {options.endKey} the key to stop iterating at
            @param {options.direction} Direction to iterate in
            @returns {Q} A promise which notifies with each individual item and resolves with all of them.
           */

          ObjectStore.prototype.each = function(options) {
            if (options == null) {
              options = {};
            }
            return this.eachBy(void 0, options);
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.eachBy
            @function
          
            @description
            Iterates through the items in the store using an index
          
            @param {indexName} name of the index to use instead of the primary
            @param {options.beginKey} the key to start iterating from
            @param {options.endKey} the key to stop iterating at
            @param {options.direction} Direction to iterate in
            @returns {Q} A promise which notifies with each individual item and resolves with all of them.
           */

          ObjectStore.prototype.eachBy = function(indexName, options) {
            var q;
            if (indexName == null) {
              indexName = void 0;
            }
            if (options == null) {
              options = {};
            }
            q = new Query();
            q.indexName = indexName;
            q.keyRange = keyRangeForOptions(options);
            q.direction = options.direction || defaultQueryOptions.direction;
            return this.eachWhere(q);
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.count
            @function
          
            @description
            Returns a count of the items in the store
          
            @returns {Q} A promise which resolves with the count of all the items in the store.
           */

          ObjectStore.prototype.count = function() {
            var defer;
            defer = this.defer();
            defer.resolveWith(this.store.count());
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.find
            @function
          
            @description
            Fetches an item from the store
          
            @returns {Q} A promise which resolves with the item from the store
           */

          ObjectStore.prototype.find = function(key) {
            var defer, req;
            defer = this.defer();
            req = this.store.get(key);
            defer.rejectWith(req);
            req.onsuccess = (function(_this) {
              return function(e) {
                if (e.target.result) {
                  return defer.resolve(e.target.result);
                } else {
                  return defer.reject("" + _this.storeName + ":" + key + " not found.");
                }
              };
            })(this);
            return defer.promise;
          };


          /**
            @ngdoc function
            @name $indexedDBProvider.store.findBy
            @function
          
            @description
            Fetches an item from the store using a named index.
          
            @returns {Q} A promise which resolves with the item from the store.
           */

          ObjectStore.prototype.findBy = function(index, key) {
            var defer;
            defer = this.defer();
            defer.resolveWith(this.store.index(index).get(key));
            return defer.promise;
          };

          ObjectStore.prototype.query = function() {
            return new Query();
          };

          return ObjectStore;

        })();
        Query = (function() {
          function Query() {
            this.indexName = void 0;
            this.keyRange = void 0;
            this.direction = cursorDirection.next;
          }

          Query.prototype.$lt = function(value) {
            this.keyRange = IDBKeyRange.upperBound(value, true);
            return this;
          };

          Query.prototype.$gt = function(value) {
            this.keyRange = IDBKeyRange.lowerBound(value, true);
            return this;
          };

          Query.prototype.$lte = function(value) {
            this.keyRange = IDBKeyRange.upperBound(value);
            return this;
          };

          Query.prototype.$gte = function(value) {
            this.keyRange = IDBKeyRange.lowerBound(value);
            return this;
          };

          Query.prototype.$eq = function(value) {
            this.keyRange = IDBKeyRange.only(value);
            return this;
          };

          Query.prototype.$between = function(low, hi, exLow, exHi) {
            if (exLow == null) {
              exLow = false;
            }
            if (exHi == null) {
              exHi = false;
            }
            this.keyRange = IDBKeyRange.bound(low, hi, exLow, exHi);
            return this;
          };

          Query.prototype.$desc = function(unique) {
            this.direction = unique ? cursorDirection.prevunique : cursorDirection.prev;
            return this;
          };

          Query.prototype.$asc = function(unique) {
            this.direction = unique ? cursorDirection.nextunique : cursorDirection.next;
            return this;
          };

          Query.prototype.$index = function(indexName) {
            this.indexName = indexName;
            return this;
          };

          return Query;

        })();
        return {

          /**
          @ngdoc method
          @name $indexedDB.objectStore
          @function
          
          @description an IDBObjectStore to use
          
          @params {string} storeName the name of the objectstore to use
          @returns {object} ObjectStore
           */
          openStore: function(storeName, callBack, mode) {
            if (mode == null) {
              mode = dbMode.readwrite;
            }
            return openTransaction([storeName], mode).then(function(transaction) {
              var results;
              results = callBack(new ObjectStore(storeName, transaction));
              return appendResultsToPromise(transaction.promise, results);
            });
          },
          openStores: function(storeNames, callback, mode) {
            if (mode == null) {
              mode = dbMode.readwrite;
            }
            return openTransaction(storeNames, mode).then(function(transaction) {
              var objectStores, results, storeName;
              objectStores = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = storeNames.length; _i < _len; _i++) {
                  storeName = storeNames[_i];
                  _results.push(new ObjectStore(storeName, transaction));
                }
                return _results;
              })();
              results = callback.apply(null, objectStores);
              return appendResultsToPromise(transaction.promise, results);
            });
          },
          openAllStores: function(callback, mode) {
            if (mode == null) {
              mode = dbMode.readwrite;
            }
            return openDatabase().then((function(_this) {
              return function() {
                var objectStores, results, storeName, storeNames, transaction;
                storeNames = Array.prototype.slice.apply(db.objectStoreNames);
                transaction = new Transaction(storeNames, mode);
                objectStores = (function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {
                    storeName = storeNames[_i];
                    _results.push(new ObjectStore(storeName, transaction));
                  }
                  return _results;
                })();
                results = callback.apply(null, objectStores);
                return appendResultsToPromise(transaction.promise, results);
              };
            })(this));
          },

          /**
            @ngdoc method
            @name $indexedDB.closeDatabase
            @function
          
            @description Closes the database for use and completes all transactions.
           */
          closeDatabase: function() {
            return closeDatabase();
          },

          /**
            @ngdoc method
            @name $indexedDB.deleteDatabase
            @function
          
            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.
           */
          deleteDatabase: function() {
            return closeDatabase().then(function() {
              var defer;
              defer = new DbQ();
              defer.resolveWith(indexedDB.deleteDatabase(dbName));
              return defer.promise;
            })["finally"](function() {
              return $log.log("$indexedDB: " + dbName + " database deleted.");
            });
          },
          queryDirection: apiDirection,
          flush: function() {
            if (allTransactions.length > 0) {
              return $q.all(allTransactions);
            } else {
              return $q.when([]);
            }
          },

          /**
            @ngdoc method
            @name $indexedDB.databaseInfo
            @function
          
            @description Returns information about this database.
           */
          databaseInfo: function() {
            return openDatabase().then(function() {
              var storeNames, transaction;
              transaction = null;
              storeNames = Array.prototype.slice.apply(db.objectStoreNames);
              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {
                var store, storeName, stores;
                stores = (function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {
                    storeName = storeNames[_i];
                    store = transaction.objectStore(storeName);
                    _results.push({
                      name: storeName,
                      keyPath: store.keyPath,
                      autoIncrement: store.autoIncrement,
                      indices: Array.prototype.slice.apply(store.indexNames)
                    });
                  }
                  return _results;
                })();
                return transaction.promise.then(function() {
                  return {
                    name: db.name,
                    version: db.version,
                    objectStores: stores
                  };
                });
              });
            });
          }
        };
      }
    ];
  });

}).call(this);

//# sourceMappingURL=angular-indexed-db.js.map

/**
  @toc

@param {Object} scope (attrs that must be defined on the scope (i.e. in the controller) - they can't just be defined in the partial html). REMEMBER: use snake-case when setting these on the partial!
@param {Object} attrs REMEMBER: use snake-case when setting these on the partial! i.e. my-attr='1' NOT myAttr='1'

@usage

| Attribute              | Default | Description                                                       |
| ---------------------- | ------- | ----------------------------------------------------------------- |
| min/data-min           | null    | A minimum value, never to go below.                               |
| max/data-min           | null    | A maximum value, never to go above.                               |
| step/data-step         | 1       | How much to increment/decrement by.                               |
| addclass/data-addclass | null    | Add a class to the container.                                     |
| width/data-width       | null    | Set the width of the input field.                                 |
| editable/data-editable | false   | Whether the field is readyonly or not. By default, it's readonly. |

partial / html:
<div fs-counter value="someValue"
    data-min="0"
    data-max="100"
    data-step="1"
    data-addclass="someClass"
    data-width="130px"
    data-editable
    ></div>

//end: usage
*/

'use strict';

angular.module('Firestitch.angular-counter', []).directive('fsCounter', ['$timeout', function ($timeout) {

    return {
        restrict: 'A',
        scope: {
            value: '=value'
        },
        template: '<div class="fs-counter input-group" ng-class="addclass" ng-style="width"><span class="input-group-btn" ng-click="minus()"><button class="btn btn-default"><span class="glyphicon glyphicon-minus"></span></button></span><input type="text" class="form-control text-center" ng-model="value" ng-blur="blurred()" ng-change="changed()" ng-readonly="readonly"><span class="input-group-btn" ng-click="plus()"><button class="btn btn-default"><span class="glyphicon glyphicon-plus"></span></button></span></div>',
        replace: true,
        link: function(scope, element, attrs) {
            var min = (angular.isUndefined(attrs.min) ? void 0 : parseInt(attrs.min)),
                max = (angular.isUndefined(attrs.max) ? void 0 : parseInt(attrs.max)),
                step = (angular.isUndefined(attrs.step) || parseInt(attrs.step) === 0 ? 1 : parseInt(attrs.step)),
                setValue,
                changeDelay;

            /**
             * Sets the value as an integer. If the value cannot be parsed,
             * i.e. returns NaN, then the min value or 0 will be used instead.
             */
            setValue = function(val) {
                var parsedVal = parseInt(val);
                if (!isNaN(parsedVal)) {
                    if (min !== undefined && min > parsedVal) {
                        parsedVal = min;
                        return parsedVal;
                    }
                    if (max !== undefined && max < parsedVal) {
                        parsedVal = max;
                        return parsedVal;
                    }
                    return parsedVal;
                } else {
                    console.log('parsedValue must parse to a number.');
                    parsedVal = min || 0;
                    return parsedVal;
                }
            };

            /**
             * Confirm the value attribute exists on the element
             */
            if (angular.isUndefined(scope.value)) {
                throw 'Missing the value attribute on the counter directive.';
            }

            /**
             * Set some scope wide properties
             */
            scope.readonly = (angular.isUndefined(attrs.editable) ? true : false);
            scope.addclass = (angular.isUndefined(attrs.addclass) ? null : attrs.addclass);
            scope.width = (angular.isUndefined(attrs.width) ? {} : {width:attrs.width});
            scope.value = setValue(scope.value);

            /**
             * Decrement the value and make sure we stay within the limits, if defined.
             */
            scope.minus = function() {
                scope.value = setValue(scope.value - step);
            };

            /**
             * Increment the value and make sure we stay within the limits, if defined.
             */
            scope.plus = function() {
                scope.value = setValue(scope.value + step);
            };

            /**
             * This is only triggered 1 second after a field is manually edited
             * by the user. Where we can perform some validation and make sure
             * that they enter the correct values from within the restrictions.
             */
            scope.changed = function() {
                changeDelay = $timeout(function (){
                    scope.value =  setValue(scope.value);
                }, 1000, true);
            };

            /**
             * This is only triggered when user leaves a manually edited field.
             * Where we can perform some validation and make sure that they
             * enter the correct values from within the restrictions.
             */
            scope.blurred = function() {
                scope.value =  setValue(scope.value);
            };
        }
    };
}]);
